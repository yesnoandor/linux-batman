
/********************************************
  File Name     : sdk_data_def.h
  Author        : chenguangde
  Created       : 2015/01/01
  Generated by xml2struct
  sdk_data.xml --> sdk_data_def.h
  !!! DO NOT EDIT !!!

  枚举类型和结构体定义

********************************************/

#ifndef __sdk_data_def_h__
#define __sdk_data_def_h__

#ifdef __cplusplus
extern "C" {
#endif

typedef char s8;
typedef unsigned char u8;
typedef short s16;
typedef unsigned short u16;
typedef int s32;
typedef unsigned int u32;
typedef long long s64;
typedef unsigned long long u64;


/*
指令动作枚举类型
*/
typedef enum {
	MESSAGE_TYPE_GET		= 1, //获取数据,有返回
	MESSAGE_TYPE_SET		, //设置数据,有返回
	MESSAGE_TYPE_SEND		, //发送数据,无返回
	MESSAGE_TYPE_RETURN_SUCCE	= 0, //返回成功
	MESSAGE_TYPE_RETURN_FAILED	= -1, //返回失败
	MESSAGE_TYPE_SERVER_EVENT	= 8, //server事件,由server产生,主动发给所有sdk
	MESSAGE_TYPE_SDK_EVENT		, //sdk事件,由sdk产生,server接收后,处理的同时将转发给所有sdk
}MESSAGE_TYPE_E;

/*
MDVR报警主类型枚举
*/
typedef enum {
	MDVR_ALARM			= 0x1000, //报警类
	MDVR_ALARM_IO			= 0x1001, //g.b.开关量报警:Subtype=DVR_IO_TYPE;state:1-报警,0-消警;state1:IO序号(0~8)
	MDVR_ALARM_POWERON		, //b.主电压报警:Subtype=DVR_POWER_STATE;state:1-报警,0-消警
	MDVR_ALARM_ACCOPEN		, //g.b.ACC异常报警:Subtype=DVR_ACC_STATE;state:1-报警,0-消警
	MDVR_ALARM_POWEROFF		, //b.关机报警:Subtype=MDVR_POWEROFF_E;state:1-报警,0-消警
	MDVR_ALARM_HIT			= 0x1010, //b.碰撞报警:Subtype=0;state:1-报警,0-消警
	MDVR_ALARM_TILT_ANGLE		, //b.倾斜角度报警:Subtype=0;state:1-报警,0-消警
	MDVR_ALARM_TEMPPERATURE		, //温度报警:Subtype:0-低温,1-高温;state:1-报警,0-消警
	MDVR_ALARM_ACCELERATION		, //加速度报警:Subtype:0-X方向,1-Y方向,2-Z方向;state:1-报警,0-消警
	MDVR_ALARM_SPEED		= 0x1100, //速度报警:Subtype:DVR_SPEED_ALARM_STATE;state:1-报警,0-消警;state1:报警持续时间(单位:s)
	MDVR_ALARM_ELECFENCE		= 0x1200, //电子围栏报警:Subtype=0;state:1-报警,0-消警
	MDVR_ALARM_DROWSYDRIVING	, //疲劳驾驶报警:Subtype=0;state:1-报警,0-消警
	MDVR_ALARM_REGION		, //进出区域报警:Subtype=区域id;state:1-进区域报警,0-进区域消警
	MDVR_ALARM_LINE			, //进出路线报警:Subtype=路线id;state:1-进路线报警,0-进路线消警
	MDVR_ALARM_DRV_TIME		, //路段行驶时间异常报警:Subtype:0-不足,1-过长;state:1-报警,0-消警
	MDVR_ALARM_OFF_LINE		, //路线偏离报警:Subtype=路线id;state:1-报警,0-消警
	MDVR_ALARM_RDT			= 0x1250, //疲劳驾驶检测报警:Subtype = DRIVER_RDT_TYPE_E;state:1-报警,0-消警
	MDVR_ALARM_LCD_ERR		= 0x1300, //终端LCD 或显示器故障:Subtype=0;state:1-报警,0-消警
	MDVR_ALARM_TTS_ERR		, //TTS 模块故障:Subtype=0;state:1-报警,0-消警
	MDVR_ALARM_IC_ERR		, //道路运输证IC卡模块故障:Subtype=0;state:1-报警,0-消警
	MDVR_ALARM_VSS_ERR		, //车辆VSS故障(车辆速度传感器):Subtype=0;state:1-报警,0-消警
	MDVR_ALARM_OIL_UNUSAL		, //车辆油量异常:Subtype=0;state:1-报警,0-消警
	MDVR_ALARM_BE_STOLEN		, //车辆被盗(通过车辆防盗器):Subtype=0;state:1-报警,0-消警
	MDVR_ALARM_VIDEO_MOVED		= 0x1400, //视频移动报警:Subtype=通道id;state:1-报警,0-消警
	MDVR_ALARM_VIDEO_LOST		, //视频丢失报警:Subtype=通道id;state:1-报警,0-消警
	MDVR_ALARM_VIDEO_COVERED	, //视频遮挡报警:Subtype=通道id;state:1-报警,0-消警
	MDVR_ALARM_DISK_DAMAGED		, //硬盘损坏报警:Subtype=磁盘id;state:1-报警,0-消警
	MDVR_ALARM_DISK_FULL		, //硬盘满报警:Subtype=磁盘id;state:1-报警,0-消警
	MDVR_STATE			= 0x2000, //系统状态类
	MDVR_STATE_SYSTEM		= 0x2001, //系统状态类:Subtype:SYSTEM_STATE_TYPE
	MDVR_STATE_GPS			= 0x2100, //g.b.GPS状态:Subtype=0;state:DVR_GPS_STATE,Data:GPS数据
	MDVR_STATE_PULSE		, //g.速度脉冲:Subtype=0;state=Pulse;state1=里程(单位0.01);
	MDVR_STATE_GSENSOR		, //g.GSENSOR状态:Subtype=0;state=x方向加速度(单位0.01g);state1=y方向加速度;state2=z方向加速度;
	MDVR_STATE_AD			, //模拟量采集:Subtype=DVR_AD_TYPE;state=模拟量值(单位0.01);
	MDVR_STATE_3G			= 0x2110, //3g状态:Subtype=0;state=DVR_3G_STATE;state1=网络类型:DVR_NET_TYPE;state2=信号值
	MDVR_STATE_WIFI			, //WIFI状态:Subtype=0;state:DVR_WIFI_STATE
	MDVR_STATE_NET			, //网络状态:Subtype=0;state:DVR_NETWORK_STATE
	MDVR_STATE_LINK			, //中心连接状态:Subtype=0;state:PROTOCOL_TYPE_E
	MDVR_STATE_DISK			= 0x2120, //磁盘状态:Subtype=DISK_ID;state:DISK_STATUS
	MDVR_STATE_REC			, //录像状态:Subtype=录像码流类型;state:通道掩码
	MDVR_STATE_PLAYBACK		= 0x2200, //录像回放状态:Subtype=0;state:Video_Play_Mode
	MDVR_STATE_3G_PHONE		, //3g通话状态:Subtype=0;state:DVR_PHONE_STATE;Data:电话号码
	MDVR_STATE_OIL_WAY		= 0x2300, //车辆油路状态:Subtype=0;state:1-异常,0-正常
	MDVR_STATE_CIRCUIT		, //车辆电路状态:Subtype=0;state:1-异常,0-正常
	MDVR_STATE_DOOR_LOCK		, //车门锁状态:Subtype=0;state:1-异常,0-正常
	MDVR_STATE_CARRYCARGO		, //b.车辆载货状态:Subtype=0;state=DVR_CAR_CARRYCARGO_STATE
	MDVR_STATE_OPERATION		, //车辆运营状态:Subtype=0;state=DVR_CAR_OPERATION_STATE
	MDVR_EVENT			= 0x4000, //操作事件类,自<串口透传>后几个类型不写用户日志
	MDVR_EVENT_USER_OPERATE		= 0x4001, //用户操作:Subtype:USER_OPERATE_TYPE
	MDVR_EVENT_INFO_REACH		= 0x4100, //中心信息下发:Subtype=BB_INFO_TYPE;state=infoId
	MDVR_EVENT_INFO_ANSWER		= 0x4101, //b.中心信息回复:Subtype=BB_INFO_TYPE;state=infoId;state1=选项ID
	MDVR_EVENT_MEDIA_START		= 0x4200, //媒体事件发起:Subtype=MULTIMEDIAFILE_TYPE,state=通道号(0-7,录音时:8-麦克),state1=MULTIMEDIA_EVENT_TYPE
	MDVR_EVENT_REC_END		= 0x4201, //b.媒体文件录完:sdk发出录音和录像请求,主程序按要求时间录完后以报警通知sdk录制完毕.Data:文件路径
	MDVR_EVENT_COM_TRANSIT		= 0x4500, //g.串口数据上行透传:Subtype:SERAL_PORT_PERIPHERAL;state:串口号;注:数据透传不关心数据内容
	MDVR_EVENT_COM_DATA		, //串口数据上报:Subtype:SERAL_PORT_PERIPHERAL;state:串口号;注:数据上报需关心内容
	MDVR_EVENT_MESSAGE_TRANSIT	, //消息传递:Subtype=事件传递地址(MESSAGE_TRANSIT_ADDRESS);state=消息ID;消息传递用于不同进程间传递消息
	MDVR_EVENT_TRANSIT_MAX		, //对透传数据会当作2进制数据处理,转换为可打印字符来传输
	MDVR_EVENT_GPS_DATA		= 0x4600, //b.gps数据:透传gps全信息,gprmc作为第一条,其余的直接连成字符串,不用加分隔符
	MDVR_EVENT_REMOTE_KEY		, //g.b.遥控键值外发:Subtype=REMOTE_KEY_CODE_TYPE;state=BB_KEY_ACTION_CODE
	MDVR_EVENT_DEBUGLOG		, //调试日志外发
	MDVR_EVENT_JPG_SEND		, //jpg图片外发
	MDVR_EVENT_PARAMCHAGE		= 0x4700, //参数改变:SYSTEM_PARAM_TYPE
}MDVR_ALARM_TYPE;

/*
对IO报警按部标给出详细定义
*/
typedef enum {
	DVR_IO_SOS			= 1, //b.紧急
	DVR_IO_FRONT_GATE		, //前门
	DVR_IO_MID_GATE			, //中门
	DVR_IO_BACK_GATE		, //后门
	DVR_IO_DRIVE_GATE		, //驾驶门
	DVR_IO_OTHER_GATE		, //其它门
	DVR_IO_DIPPED_LIGHT		, //g.b.近光灯
	DVR_IO_DISTANCE_LIGHT		, //g.b.远光灯
	DVR_IO_TIGHT_TURN		, //g.b.右转灯
	DVR_IO_LEFT_TURN		, //g.b.左转灯
	DVR_IO_BRAKE			, //g.b.刹车
	DVR_IO_BACK_OFF			, //倒车
	DVR_IO_FOGLIGHT			, //雾灯
	DVR_IO_OUTLINE_LIGHT		, //示廓灯
	DVR_IO_HORN			, // 喇叭
	DVR_IO_AIR_CONDITION		, //空调
	DVR_IO_NEUTRAL_GEAR		, //空挡
	DVR_IO_RETARDER			, //缓速器
	DVR_IO_ABS			, //ABS
	DVR_IO_HEATER			, //加热器
	DVR_IO_CLUTCH			, //离合器
	DVR_IO_GATE_MAGNETISM		, //门磁
	DVR_IO_SMOKE_DETECTOR		, //烟感
	DVR_IO_USER_DEFINED_1		, //自定义1
	DVR_IO_USER_DEFINED_2		, //自定义2
	DVR_IO_USER_DEFINED_3		, //自定义3
	DVR_IO_USER_DEFINED_4		, //自定义4
	DVR_IO_USER_DEFINED_5		, //自定义5
	DVR_IO_USER_DEFINED_6		, //自定义6
	DVR_IO_USER_DEFINED_7		, //自定义7
	DVR_IO_USER_DEFINED_8		, //自定义8
	DVR_IO_MAX			,
}DVR_IO_TYPE;

/*
速度报警状态
*/
typedef enum {
	DVR_SPEED_PARK_OVERTIME		= 0, //超时停车
	DVR_SPEED_LOW_ALARM		, //低速报警
	DVR_SPEED_LOW_WARMING		, //低速预警
	DVR_SPEED_HIGH_WARMING		, //高速预警
	DVR_SPEED_HIGH_ALARM		, //高速报警
}DVR_SPEED_ALARM_STATE;

/*
电压状态
*/
typedef enum {
	DVR_POWER_POWERDOWN		= 0, //b.掉电
	DVR_POWER_UNDERVOLTAGE		, //b.欠压
	DVR_POWER_SUPERVOLTAGE		, //超压
	DVR_POWER_NORMAL		, //电压正常
}DVR_POWER_STATE;

/*
ACC状态
*/
typedef enum {
	DVR_ACC_NORMAL			= 0, //ACC正常
	DVR_ACC_ABNORMAL		, //ACC异常
}DVR_ACC_STATE;

/*
模拟量采集类型
*/
typedef enum {
	DVR_AD_POWER_VOLTAGE		= 0, //电源电压值
	DVR_AD_BATTERY_VOLTAGE		, //电池电压值
	DVR_AD_ACC_VOLTAGE		, //ACC电压值
	DVR_AD_0			, //模拟量采集0
	DVR_AD_1			, //模拟量采集1
}DVR_AD_TYPE;

/*
gps工作状态
*/
typedef enum {
	DVR_GPS_MODULE_NOEXIST		= 0, //模块不存在
	DVR_GPS_MODULE_ERR		, //模块存在,但有故障
	DVR_GPS_ANTENNA_CLIPPING	, //b.天线未接或被剪断
	DVR_GPS_ANTENNA_SHORTCIRCUIT	, //天线短路
	DVR_GPS_WORK_OK			, //b.定位正常
	DVR_GPS_WORK_NO			, //未定位
}DVR_GPS_STATE;

/*
3g工作状态
*/
typedef enum {
	DVR_3G_MODULE_NOEXIST		= 0, //模块不存在
	DVR_3G_SIM_NOEXIST		, //模块存在,SIM卡不存在
	DVR_3G_DIAL_NO			, //未拨号
	DVR_3G_DIALING			, //拨号中
	DVR_3G_DIAL_OK			, //拨号成功
	DVR_3G_DIAL_FAIL		, //拨号失败
}DVR_3G_STATE;

/*
3g通话状态
*/
typedef enum {
	DVR_PHONE_IDLE			= 0, //空闲
	DVR_PHONE_DIALING		, //拨号中
	DVR_PHONE_DIAL_SUCCEED		, //拨号成功
	DVR_PHONE_DIAL_FAIL		, //拨号失败
	DVR_PHONE_RING			, //来电
	DVR_PHONE_TALKING		, //通话中
	DVR_PHONE_OVER			, //通话结束
}DVR_PHONE_STATE;

/*
3g通话失败原因
*/
typedef enum {
	DVR_PHONE_FAIL_NO_EXIST		= 1, //模块不存在
	DVR_PHONE_FAIL_NO_START		, //模块未启动
	DVR_PHONE_FAIL_NO_SIGNAL	, //无信号
	DVR_PHONE_FAIL_NO_COST		, //欠费
	DVR_PHONE_FAIL_BUSY		, //对方占线
	DVR_PHONE_FAIL_NO_NUM		, //空号
	DVR_PHONE_FAIL_OUT_LINE		, //不在服务区
	DVR_PHONE_FAIL_CLOSE		, //已关机
	DVR_PHONE_FAIL_NO_SUPPORT	, //模块不支持
	DVR_PHONE_FAIL_MAX_NUM		,
}DVR_PHONE_FAIL_REASON;

/*
WIFI状态
*/
typedef enum {
	DVR_WIFI_MODULE_NOEXIST		= 0, //模块不存在
	DVR_WIFI_NORMAL			, //WIFI正常
	DVR_WIFI_ABNORMAL		, //WIFI异常
}DVR_WIFI_STATE;

/*
车辆载货状态枚举
*/
typedef enum {
	DVR_CARRYCARGO_EMPTY		= 0, //b.空载
	DVR_CARRYCARGO_HALF		, //b.半载
	DVR_CARRYCARGO_FULL		, //b.满载
}DVR_CAR_CARRYCARGO_STATE;

/*
车辆运营状态枚举
*/
typedef enum {
	DVR_OPERATION_RUNNING		= 0, //运营中
	DVR_OPERATION_STOP		, //非运营中
}DVR_CAR_OPERATION_STATE;

/*
消息传递地址
*/
typedef enum {
	MESSAGE_ADDRESS_MAINAPP		= 0x01, //主程序
	MESSAGE_ADDRESS_BBAPP		= 0x02, //部标程序
	MESSAGE_ADDRESS_GBAPP		= 0x04, //国标程序
	MESSAGE_ADDRESS_EXT1		= 0x08, //扩展地址1
	MESSAGE_ADDRESS_EXT2		= 0x10, //扩展地址2
	MESSAGE_ADDRESS_EXT3		= 0x20, //扩展地址3
	MESSAGE_ADDRESS_ALL		= 0xFF, //事件广播
}MESSAGE_TRANSIT_ADDRESS;

/*
遥控码类别枚举
*/
typedef enum {
	REMOTE_KEY_TYPE_UNDEF		= 0, //未定义遥控码
	REMOTE_KEY_TYPE_DVR		, //DVR遥控码---遥控器键值
	REMOTE_KEY_TYPE_BB		, //部标遥控码---部标GUI模拟键值BB_KEY_ACTION_CODE
	REMOTE_KEY_TYPE_GB		, //国标遥控码---LCD屏按键(1-上,2-下,3-确认,4-菜单)
}REMOTE_KEY_CODE_TYPE;

/*
部标过标测试手动触发项定义
*/
typedef enum {
	BB_KEY_REG			= 0, //b.注册
	BB_KEY_AUTH			, //b.鉴权
	BB_KEY_UNREG			, //b.注销
	BB_KEY_EVENT			= 10, //b.事件报告
	BB_KEY_INFO_VOD			, //b.信息点播
	BB_KEY_INFO_VOD0		, //b.信息取消
	BB_KEY_WAYBILL			, //b.电子运单上报
	BB_KEY_DRIVER			, //b.驾驶员信息上报
	BB_KEY_MEDIA			, //b.上传多媒体事件
	BB_KEY_PHOTO			, //图片抓拍上传
	BB_KEY_VOICE			, //音频上传
	BB_KEY_VIDEO			, //视频上传
	BB_KEY_CLEAN_AUTH		= 30, //b.手动清鉴权码
	BB_KEY_INTERVAL_30		, //b.手动设置汇报间隔为30s
	BB_KEY_INTERVAL_1		, //b.手动设置汇报间隔为1s
	BB_KEY_CLEAN_DB			, //b.清除盲点数据库数据
	BB_KEY_DEL_UPGRADE_FILE		, //b.删除升级测试文件
	BB_KEY_FIRST_REG		= 50, //b.首次注册货运平台:使用前锁定（快速开户）
	BB_KEY_MAX			,
}BB_KEY_ACTION_CODE;

/*
疲劳驾驶检测报警枚举类型
*/
typedef enum {
	MILD_TRIED			= 0x1, //轻度疲劳
	DEEPLY_TRIED			= 0x2, //重度疲劳
	OVER_LEFT_LINE			= 0x4, //左压线
	OVER_RIGHT_LINE			= 0x8, //右压线
	DRIVE_LOW_HOLD			= 0x10, //车道保持下降
	NO_DRIVER			= 0x20, //未检测到驾驶员
}DRIVER_RDT_TYPE_E;

/*
串口类型枚举
*/
typedef enum {
	SERIALPORT_CLOSE		= 0x0, //串口关闭
	COM_TYPE_INDUSTRY_TERMINAL	= 0x01, //行业信息终端机
	COM_TYPE_SCREEN_DIAODU		= 0x02, //调度显示屏
	COM_TYPE_SCREEN_DAOHANG		= 0x03, //车载导航显示屏
	COM_TYPE_OIL_GAUGE		= 0x04, //油量检测器
	COM_TYPE_DETECTOR_ACCEL		= 0x05, //加速度检测器
	COM_TYPE_BURGLAR_ALARM		= 0x06, //防盗报警器
	COM_TYPE_INTERFACE_EXPANSION	= 0x07, //接口扩展器
	COM_TYPE_DETECTOR_CARRYING	= 0x08, //载重检测器
	COM_TYPE_DETECTOR_PASS_FLOW	= 0x09, //客流检测器
	COM_TYPE_SENSOR_GENERAL		= 0x0A, //通用传感器
	COM_TYPE_232_ICCARD_BB		= 0x0B, //道路运输证IC卡读卡器:发送时以tr_bbIcCardInfo结构传输
	COM_TYPE_COM1			= 0x41, //串口1透传
	COM_TYPE_COM2			= 0x42, //串口2透传
	COM_TYPE_USER_DEFINED_1		= 0xF0, //自定义1
	COM_TYPE_USER_DEFINED_2		, //自定义2
	COM_TYPE_CAN			= 0x101, //can数据透传
	COM_TYPE_485_PTZ		= 0x110, //云台
	COM_TYPE_485_WIDE_LED		= 0x120, //公交走字屏
	COM_TYPE_485_PANEL		= 0x130, //面板
	COM_TYPE_232_IC_GJ		= 0x210, //公交屏ic卡
	COM_TYPE_232_IC_DK		= 0x211, //德卡ic卡
	COM_TYPE_232_IC_BB_TR		= 0x212, //部标ic卡透传,区别于COM_TYPE_232_ICCARD_BB,不需关心透传内容
	COM_TYPE_232_IC_TR		= 0x213, //公交身份确认ic卡，透传,不需关心透传内容
	COM_TYPE_232_ICCARD_GB		= 0x215, //g.IC卡读卡器:发送时以tr_gbIcCardInfo结构传输
	COM_TYPE_232_PRINT_E26		= 0x220, //打印机(E26)
	COM_TYPE_232_BD			= 0x230, //北斗终端
	COM_TYPE_232_TALKDEV		= 0x240, //对讲机
	COM_TYPE_232_POS		= 0x250, //POS机
	COM_TYPE_232_DRIVING		= 0x260, //行驶屏
	COM_TYPE_485_DR			= 0x270, //g.行驶记录仪
	COM_TYPE_232_DR_COM		= 0x280, //g.行行驶记录仪通信串口
	COM_TYPE_RDT_COM		= 0x285, //疲劳驾驶仪串口
	COM_TYPE_232_TTS_XDL		= 0x290, //硬件tts-XFS5152CE:tts0
	COM_TYPE_232_TTS_MDL		= 0x291, //硬件tts-SX6288A:tts1
	COM_TYPE_232_SCREEN_TR		= 0x300, //走字屏_透传
	COM_TYPE_232_OIL_LH		= 0x320, //油量检测器LH
	COM_TYPE_485_OIL_LX		= 0x321, //油量检测器LX
	COM_TYPE_232_OIL_CR		= 0x322, //直杆油量检测器CR
	COM_TYPE_ULT_OIL0		= 0x323, //超声波油量检测器0
	COM_TYPE_ULT_OIL1		= 0x324, //超声波油量检测器1
	COM_TYPE_232_GPS_RECV		= 0x330, //GPS接收
	COM_TYPE_232_GPS_SEND		= 0x331, //GPS发送
	COM_TYPE_LOOPBACK_TEST		= 0x340, //串口环回测试
	SERIALPORT_MAX			, //最大串口设备编号
}SERAL_PORT_PERIPHERAL;

/*
云台控制命令详细定义
*/
typedef enum {
	PCT_STOP			= 0, //停止
	PCT_PAN_RIGHT			= 1, //向右
	PCT_PAN_LEFT			, //向左
	PCT_TILE_UP			, //向上
	PCT_TILE_DOWN			, //向下
	PCT_ZOOM_TELE			, //变倍短
	PCT_ZOOM_WIDE			, //变倍长
	PCT_FOCUS_FAR			, //聚焦近
	PCT_FOCUS_NEAR			, //聚焦远
	PCT_IRIS_OPEN			,
	PCT_IRIS_CLOSE			,
	PCT_CAMERA_RESET		, //相机复位
	PCT_AUTO_SCAN			, //自动扫描
	PCT_SET_PRESET			= 20, //设置预置位
	PCT_CLR_PREET			, //清预置位
	PCT_GOTO_PRESET			, //回到开始地方
	PCT_INFRARED_OPEN		= 75, //红外开
	PCT_INFRARED_CLOSE		= 76, //红外关
	PCT_WIPER_OPEN			= 77, //雨刷开
	PCT_WIPER_CLOSE			= 78, //雨刷关
	PCT_INIVALID			,
}ptzcmdtable_t;

/*
系统事件分类
*/
typedef enum {
	SYSTEM_BOOT			= 1, //系统启动
	SYSTEM_POWEROFF			, //系统关机
	SYSTEM_CHIP_VERIFY_ERR		= 10, //加密认证失败
}SYSTEM_STATE_TYPE;

/*
用户操作分类
*/
typedef enum {
	USER_LOGIN			= 1, //用户登录
	USER_LOGOUT			, //退出登录
	USER_LOCAL_UPGRADE		= 10, //系统本地升级
	USER_FTP_UPGRADE		, //系统FTP升级
	USER_PARAM_SET			= 20, //参数设置state:SYSTEM_PARAM_TYPE
	USER_PARAM_RESETDEFAULT		, //参数恢复出厂设置
	USER_PARAM_EXPORTCFG		, //参数导出
	USER_PARAM_INPORTCFG		, //参数手动导入
	USER_PARAM_AUTO_INPORTCFG	, //参数自动导入
	USER_PLAYBACK			= 30, //录像回放
	USER_TEL_OPERATE		= 40, //电话操作,state:TEL_OP_TYPE
	USER_SMS_RECV			, //收到短信
	USER_SMS_SEND			, //发送短信
	USER_RESETGSENSORBASEVALUE	= 50, //校正加速度传感器基准值
	USER_FORMAT_DISK		= 60, //格式化磁盘,state:DISK_ID
}USER_OPERATE_TYPE;

/*
系统参数分类
*/
typedef enum {
	SYSTEM_PARAM_BASE		= 0x0100, //基本设置
	SYSTEM_PARAM_REC		= 0x0200, //录像参数
	SYSTEM_PARAM_NET		= 0x0400, //网络参数
	SYSTEM_PARAM_ALARM		= 0x0800, //报警参数
	SYSTEM_PARAM_EXT		= 0x1000, //外设参数
	SYSTEM_PARAM_OTHER		= 0x2000, //其它参数
}SYSTEM_PARAM_TYPE;

/*
定位模式掩码
*/
typedef enum {
	POSITION_MODE_GPS		= 0x01, //GPS
	POSITION_MODE_BD		= 0x02, //北斗
}POSITION_MODE_MASK;

/*
GPS信息掩码
*/
typedef enum {
	GPS_RMC				= 0x01, //b.RMC
	GPS_ALL				= 0xFF, //b.全信息
}GPS_INFO_MASK;

/*
网络制式
*/
typedef enum {
	WCDMA				= 0, //联通3G:WCDMA
	EVDO				, //电信3G:EVDO
	TDSCDMA				, //移动3G:TD-SCDMA
	TDDLTE				, //4G:移动
	FDDLTE_W			, //4G:联通
	FDDLTE_C			, //4G:电信
	EVDO_T				, //电信3G:写卡
	STANDARD_MAX			,
}NET_STANDARD;

/*
网络类型
*/
typedef enum {
	DVR_NET_TYPE_NULL		= 0, //未知网络
	DVR_NET_TYPE_2G			, //2G
	DVR_NET_TYPE_3G			, //3G
	DVR_NET_TYPE_4G			, //4G
}DVR_3G_NET_TYPE;

/*
网路连接状态
*/
typedef enum {
	NETWORK_USED_NONE		= 0, //没有网络
	NETWORK_USED_3G			, //使用3G网络
	NETWORK_USED_4G			, //使用4G网络
	NETWORK_USED_WIFI		, //使用内置WIFI
	NETWORK_USED_WIFI_EXT		, //使用外置WIFI
	NETWORK_USED_LINE		, //使用有线网
}DVR_NETWORK_STATE;

/*
磁盘编号
*/
typedef enum {
	DISKID_UNKNOWN			= 0, //未知磁盘
	DISKID_DATA			, //数据盘---不录像,用于记录日志,抓拍和运行数据记录等
	DISKID_REC1			, //录像盘1---只作录像使用
	DISKID_REC2			, //录像盘2
	DISKID_REC3			, //录像盘3
	DISKID_REC4			, //录像盘4
	DISKID_EXT1			, //扩展盘1
	DISKID_MAX			,
}DISK_ID;

/*
磁盘状态
*/
typedef enum {
	DISKSTATUS_UNCHECKED		= 0, //初始状态
	DISKSTATUS_FORCE_UMOUNT		, //强制卸载状态
	DISKSTATUS_FORMATTING		, //正在格式化
	DISKSTATUS_MOUNTING		, //正在挂载中
	DISKSTATUS_UMOUNTING		, //正在卸载中
	DISKSTATUS_REPAIRING		, //正在修复中
	DISKSTATUS_ERR_NOT_EXIST	, //设备不存在
	DISKSTATUS_ERR_FORMAT		, //格式化失败
	DISKSTATUS_ERR_NOT_PARTITION	, //未分区状态
	DISKSTATUS_ERR_MOUNT		, //挂载失败
	DISKSTATUS_ERR_CONTENT		, //格式或内容错误,需要格式化
	DISKSTATUS_ERR_READONLY		, //挂载成功,但是是只读的
	DISKSTATUS_NORMAL		, //磁盘正常
	DISKSTATUS_WARNING_SPACE	, //预警,磁盘剩余空间小于某数值
	DISKSTATUS_NO_SPACE		, //空间不够,磁盘剩余空间小于某数值
}DISK_STATUS;

/*
串口编号
*/
typedef enum {
	COM_ID_RS232_1			, //RS232-1
	COM_ID_RS232_2			, //RS232-2
	COM_ID_RS485_1			, //RS485-1
	COM_ID_RS485_2			, //RS485-2
}COM_ID_E;

/*
系统重启类型
*/
typedef enum {
	REBOOT_FOR_NULL			= 0, //无重启
	REBOOT_FOR_ACC			, //ACC关机
	REBOOT_FOR_TIMING		, //定时关机
	REBOOT_FOR_SDLOCK		, //电子锁关机
	REBOOT_FOR_VOLTAGE		, //高低电压关机
	REBOOT_FOR_CONFIG_SET		, //参数恢设置重启
	REBOOT_FOR_CONFIG_IMPORT	, //参数导入重启
	REBOOT_FOR_CONFIG_DEFAULT	, //参数恢复重启
	REBOOT_FOR_UPGRADE_OVER		, //升级完毕重启
	REBOOT_FOR_DISK_FORMAT		, //磁盘格式化重启
	REBOOT_FOR_DISK_ERR		, //磁盘错误重启
	REBOOT_FOR_3G_ERR		, //3G驱动异常重启
	REBOOT_FOR_WIFI_ERR		, //WIFI异常重启
	REBOOT_FOR_SMS			, //短信重启
	REBOOT_FOR_CMS			, //远程重启
	REBOOT_FOR_SDK			, //SDK重启
	REBOOT_FOR_OTHER		, //其它重启
	REBOOT_FOR_HALT			, //远程关机
}SYSTEM_REBOOT_TYPE_E;

/*
电源管理类型
*/
typedef enum {
	POWER_5V			= 0, //5V电源输出
	POWER_12V			, //12V电源输出
	POWER_OUT1			, //报警输出1
	POWER_OUT2			, //报警输出2
	POWER_OUT3			, //报警输出3
	POWER_OUT4			, //报警输出4
	POWER_COM1			, //串口1电源
	POWER_COM2			, //串口2电源
	POWER_CAMERA_1			= 8, //摄像头1电源
	POWER_CAMERA_2			, //摄像头2电源
	POWER_CAMERA_3			, //摄像头3电源
	POWER_CAMERA_4			, //摄像头4电源
	POWER_CAMERA_5			, //摄像头5电源
	POWER_CAMERA_6			, //摄像头6电源
	POWER_CAMERA_7			, //摄像头7电源
	POWER_CAMERA_8			, //摄像头8电源
	POWER_USB			= 16, //USB电源
	POWER_USB_RESET			, //USB复位
	POWER_SD			, //SD卡电源
	POWER_SD_RESET			, //SD卡复位
	POWER_HDD			, //HDD电源
	POWER_HDD_RESET			, //HDD复位
	POWER_GPS			= 24, //GPS电源
	POWER_GPS_RESET			, //GPS复位
	POWER_WIFI			, //WIFI电源
	POWER_WIFI_RESET		, //WIFI复位
	POWER_3G			, //3G电源
	POWER_3G_RESET			, //3G复位
	POWER_LED_GPS			= 32, //GPS指示灯
	POWER_LED_3G			, //3G指示灯
	POWER_LED_WIFI			, //WIFI指示灯
	POWER_LED_NET			, //平台连接指示灯
	POWER_LED_ALM			, //ALM报警指示灯
	POWER_LED_ERR			, //ERR错误指示灯
	POWER_LED_SD1			= 40, //SD1指示灯
	POWER_LED_SD2			, //SD2指示灯
	POWER_LED_HDD1			, //HDD1指示灯
	POWER_LED_HDD2			, //HDD2指示灯
	POWER_LED_USB			, //USB指示灯
	POWER_LED_REC			, //录像指示灯
	POWER_LED_VLOST			, //视频丢失指示灯
	POWER_LED_HEAT			, // 硬盘加热指示灯
}MDVR_POWER_TYPE_E;

/*
g.国标检定命令
*/
typedef enum {
	GB_CONTROL_CHECK_INTO_TEST	= 0xE0, //进入或保持检定状态
	GB_CONTROL_CHECK_MILEAGE	= 0xE1, //进入里程误差测量:通过DB9的7脚接收标准速度脉冲测量信号(TTL电平)
	GB_CONTROL_CHECK_K_VALUE	= 0xE2, //进入脉冲系数误差测量:通过DB9的7脚输出车速传感器信号(TTL电平)
	GB_CONTROL_CHECK_REAL_TIME	= 0xE3, //进入实时时间误差测量:通过DB9的7脚输出实时时钟的秒脉冲信号(TTL电平)
	GB_CONTROL_CHECK_EXIT_TEST	= 0xE4, //返回正常工作状态
	GB_CONTROL_CHECK_RESERVE	= 0xE5, //E5H～EFH预留
	GB_CONTROL_CHECK_MAX		= 0xEF,
}GB_CONTROL_CHECK_CMD;

/*
系统操作类别
*/
typedef enum {
	SYSTEM_CONTROL_REBOOT		= 1, //b.系统复位启动,Subtype:SYSTEM_REBOOT_TYPE_E;State:重启延迟时间;Data:重启描述
	SYSTEM_CONTROL_POWER		, //电源控制,Subtype:MDVR_POWER_TYPE_E;State:电源状态:0-关闭,1-打开,2-闪(对LED灯有效)
	PARAM_CONTROL_RESETDEFAULT	= 5, //恢复出厂设置
	PARAM_CONTROL_EXPORTCFG		, //参数导出:返回值State:0-导出成功,1-未找到磁盘
	PARAM_CONTROL_INPORTCFG		, //参数导入:返回值State:0-导入成功,1-未找到参数文件
	PARAM_CONTROL_EXPORT_DEFAULT	, //导出为默认参数:返回值State:0-导出成功,1-导出失败
	PARAM_CONTROL_INPORT_DEFAULT	, //恢复默认参数:返回值tate:0-恢复成功,1-恢复失败
	RESETGSENSORBASEVALUE		= 10, //校正加速度传感器基准值
	RESET_IPC_DATE_TIME		, //校正IPC时间
	MDVR_CONTROL_FTP_UPGRADE	= 20, //触发ftp远程升级
	MDVR_CONTROL_FORMAT_DISK	= 25, //格式化磁盘:State:DISK_ID
	MDVR_CONTROL_SEND_DEBUGLOG	= 30, //外发调试信息:State:0-不发,1-发
	SYSTEM_CONTROL_GB_CHECK		= 35, //g.国标检定命令:State:GB_CONTROL_CHECK_CMD
}SYSTEM_CONTROL_TYPE;

/*
视频显示模式
*/
typedef enum {
	VIDEO_LAYOUT_1X1		= 0, //单画面
	VIDEO_LAYOUT_2X2		, //四画面
	VIDEO_LAYOUT_3X3		, //九画面
	VIDEO_LAYOUT_PARAM		, //参数设置布局
	VIDEO_LAYOUT_USER		, //用户自定义布局
	VIDEO_LAYOUT_MAX		,
}Video_Layout_Mode;

/*
录像控制模式
*/
typedef enum {
	VIDEO_CTRL_PAUSE_RECORD		= 20, //暂停录像---进录像搜索页面时执行
	VIDEO_CTRL_RESUME_RECORD	, //继续录像---退出录像搜索页面时执行
	VIDEO_CTRL_OPEN_REC_FILE	, //打开录像文件
	VIDEO_CTRL_CLOSE_REC_FILE	, //关闭录像文件
	VIDEO_CTRL_SETLAYOUT		, //设置播放画面布局
	PIC_START_PLAY			, //开始图片播放	
	PIC_PLAY_ONE			, //播放一张图片
	PIC_END_PLAY			, //停止图片播放
	VIDEO_PLAY_STOP			= 0, //停止
	VIDEO_PLAY_NORMAL		, //播放
	VIDEO_PLAY_PAUSE		, //暂停
	VIDEO_PLAY_FORWARD1		, //快进1
	VIDEO_PLAY_FORWARD2		, //快进2
	VIDEO_PLAY_FORWARD3		, //快进3
	VIDEO_PLAY_FORWARD4		, //快进4
	VIDEO_PLAY_BACKWARD1		, //快退1
	VIDEO_PLAY_BACKWARD2		, //快退2
	VIDEO_PLAY_BACKWARD3		, //快退3
	VIDEO_PLAY_BACKWARD4		, //快退4
	VIDEO_PLAY_SLOWDOWN1		, //慢放1
	VIDEO_PLAY_SLOWDOWN2		, //慢放2
	VIDEO_PLAY_SLOWDOWN3		, //慢放3
	VIDEO_PLAY_SLOWDOWN4		, //慢放4
	VIDEO_PLAY_FORWARD_IFRAME	, //跳到下一I帧
	VIDEO_PLAY_BACKWARD_IFRAME	, //退到上一I帧
	VIDEO_PLAY_FORWARD_ALARM	, //跳到下一报警帧
	VIDEO_PLAY_BACKWARD_ALARM	, //退到上一报警帧
	VIDEO_PLAY_MAX_PLAY_STATUS	,
}Video_CTRL_Mode;

/*
多媒体文件类型
*/
typedef enum {
	MULTIMEDIAFILE_AUDIO		= 1, //b.音频文件
	MULTIMEDIAFILE_VIDEO		= 2, //b.视频文件
	MULTIMEDIAFILE_PIC		= 3, //b.图片文件
}MULTIMEDIAFILE_TYPE;

/*
多媒体事件编码
*/
typedef enum {
	MULTIMEDIA_EVENT_CENTER		= 0, //平台下发指令
	MULTIMEDIA_EVENT_TIMING		= 1, //定时动作
	MULTIMEDIA_EVENT_SOS		= 2, //抢劫报警触发
	MULTIMEDIA_EVENT_CRASH		= 3, //碰撞侧翻报警触发
	MULTIMEDIA_EVENT_DOOR_OPEN	= 4, //门开拍照
	MULTIMEDIA_EVENT_DOOR_CLOSE	= 5, //门关拍照
	MULTIMEDIA_EVENT_DOOR_OPEN2CLOSE= 6, //车门由开变关,时速从＜20 公里到超过20 公里
	MULTIMEDIA_EVENT_DISTANCE	= 7, //定距拍照
	MULTIMEDIA_EVENT_OTHER		, //其他
}MULTIMEDIA_EVENT_TYPE;

/*
电话操作方式
*/
typedef enum {
	TEL_DIAL_UP			= 0, //拨电话
	TEL_PICK_UP			, //接电话
	TEL_HAND_UP			, //挂电话
	TEL_HORN_VOLUME			, //设喇叭音量
	TEL_MIC_VOLUME			, //设麦克音量
}TEL_OP_TYPE;

/*
电话本操作方式
*/
typedef enum {
	TEL_ADD				= 0, //添加电话
	TEL_DEL				, //删除电话,按名字或号码删除对应记录,当名字和号码都填all时删除所有电话记录
	TEL_UPD				, //修改电话,只能按名字修改号码
}TELBOOK_OP_TYPE;

/*
通话记录查询属性
*/
typedef enum {
	CALL_IN				= 0x1, //打进
	CALL_OUT			= 0x2, //打出
}CALL_LOG_TYPE;

/*
电话本查询操作方式
*/
typedef enum {
	TELBOOK_SEARCH			= 0, //电话本内容查询
	CONTACTS_SEARCH			, //按姓名进行查找电话本里面的联系人
	CALL_LOG			, //通话记录查询
}TELBOOK_SEARCH_OP_TYPE;

/*
电话号码属性
*/
typedef enum {
	TEL_LIMIT_IN_OUT		= 0x0, //限制呼入呼出
	TEL_PERMIT_IN			= 0x1, //允许呼入,限制呼出
	TEL_PERMIT_OUT			= 0x2, //允许呼出,限制呼入,
	TEL_PERMIT_IN_OUT		= 0x3, //允许呼入呼出
}TEL_NUMBER_ATTRIBUTE;

/*
信息类别
*/
typedef enum {
	INFO_TYPE_MAIL			= 1, //b.文本
	INFO_TYPE_EVENT			, //b.事件
	INFO_TYPE_QUESTION		, //b.提问
	INFO_TYPE_DEMAND		, //b.点播
	INFO_TYPE_SERVICE		, //b.服务
}BB_INFO_TYPE;

/*
信息属性
*/
typedef enum {
	INFO_REMARK_ALARM		= 0x01, //b.紧急标志:tts+显示屏
	INFO_REMARK_TTS			= 0x02, //g.b.TTS
	INFO_REMARK_SCR			= 0x04, //b.显示屏
	INFO_REMARK_LED			= 0x08, //走字屏
	INFO_REMARK_PRINT		= 0x10, //g.打印机
	INFO_REMARK_LOG			= 0x80, //g.调试日志
}BB_INFO_REMARK;

/*
机型定义
*/
typedef enum {
	MDVRTYPE_SD_V1			= 0, //卡机
	MDVRTYPE_SD_V2			,
	MDVRTYPE_SD_V3			,
	MDVRTYPE_SD_MAX			,
	MDVRTYPE_HDD_V1			= 20, //硬盘机
	MDVRTYPE_HDD_V2			,
	MDVRTYPE_HDD_V3			,
	MDVRTYPE_HDD_MAX		,
}MDVR_TYPE_E;

/*
设备产品定义
*/
typedef enum {
	MDVR_TYPE_NULL			= 0x00, //旧机型
	MDVR_TYPE_BSD			= 0x10, //宝斯达1代
	MDVR_TYPE_MAX			,
}MDVR_PRODUCT_TYPE_E;

/*
协议类别
*/
typedef enum {
	PROTOCOL_BBLINK			= 0x0001, //部标协议
	PROTOCOL_WKPLINK		= 0x0002, //WKP协议
	PROTOCOL_OTHERLINK		= 0x8000, //其它协议
}PROTOCOL_TYPE_E;

/*
部标协议类别
*/
typedef enum {
	BB_PROTOCOL_BD			= 0, //部标北斗协议
	BB_PROTOCOL_808			, //部标808协议
	BB_PROTOCOL_BD_TEST		, //北斗过标测试
	BB_PROTOCOL_808_TEST		, //808过标测试
	BB_PROTOCOL_BD_MANGQU		, //北斗过标测试(盲区):测盲区时需设置为此状态,测完后再恢复为BB_PROTOCOL_BD_TEST
	BB_PROTOCOL_BD_LOCK		, //北斗过标测试(锁定状态):测锁定2时,初始配置为此状态,待注册解锁后调为BB_PROTOCOL_BD_TEST,上线判定
}BB_PROTOCOL_TYPE;

/*
报警联动定义
*/
typedef enum {
	LINKAGE_CLOSE			= 0, //关闭
	LINKAGE_OUTPUT_1		= 0x0001, //电平输出1
	LINKAGE_OUTPUT_2		= 0x0002, //电平输出2
	LINKAGE_OUTPUT_3		= 0x0004, //电平输出3
	LINKAGE_OUTPUT_4		= 0x0008, //电平输出4
	LINKAGE_BUZZER			= 0x0010, //蜂鸣器
	LINKAGE_1KEY_CALL		= 0x0020, //一键拨号--[IO报警]
	LINKAGE_REQUEST_TALK		= 0x0040, //请求对讲--[IO报警]
	LINKAGE_TTS_TIP			= 0x100, //语音提示--[超速报警]
	LINKAGE_GUI_TIP			= 0x200, //GUI提示--[超速报警]
}ALARM_LINKAGE_E;

/*
用户自定义参数定义
*/
typedef enum {
	USER_DEF_GUI_ALPHA		= 0, //GUI透明度,用到前两个intParam
	USER_DEF_TOUCH_SCREEN_ADJUST	= 1, //触摸屏校正参数(需要用到8个intParam)
	USER_DEF_IO_SET_PARAM		= 10, //io设置里面的8个自定义参数
	USER_DEF_MAX			= 31, //最多支持32组自定义参数
}USER_DEFINED_ID_E;

/*
注册SDK
*/
typedef struct __tag_Sdk_register {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
}Sdk_register;

/*
注销SDK
*/
typedef struct __tag_Sdk_unregister {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
}Sdk_unregister;

/*
看门狗
*/
typedef struct __tag_Sdk_watchDog {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s32				Opdog;		// 0-喂狗,1注册狗,2-注销狗
	s8				dogName[20];		// 狗名
	s32				dogtime;		// 最长喂狗时间
}Sdk_watchDog;

/*
g.b.读取参数路径
*/
typedef struct __tag_Info_getParamPath {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s8				ParamPath[32];		// g.b.可用参数路径
}Info_getParamPath;

/*
gps信息
*/
typedef struct __tag_Info_gps {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s32				positionMode;		// 定位模式:POSITION_MODE_MASK
	s32				gpsState;		// b.gps状态:DVR_GPS_STATE
	s32				gpsValid;		// gps是否有效:0-无效;1-有效.
	double				longitude;		// 经度
	s32				directionLon;		// 经度方向:[E]ast or [W]est
	double				latitude;		// 纬度
	s32				directionLat;		// 纬度方向:[N]orth or [S]outh
	s32				direction;		// 方向
	double				elevational;		// b.海拔高度(单位:m)
	double				speed;		// b.gps速度(单位:0.01km/h)
	s32				starNumber;		// b.搜星数
}Info_gps;

/*
b.GPS原始信息
*/
typedef struct __tag_Info_gpsOriginalData {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s32				data_mask;		// GPS信息掩码:GPS_INFO_MASK
	s8				Data[1024];		// g.b.GPS原始数据
}Info_gpsOriginalData;

/*
3g信息
*/
typedef struct __tag_Info_3g {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s32				Module_Exist;		// g.3G模块是否存在:0-不存在;1-存在.
	s32				Module_Type;		// 3G模块类型:0-WCDMA,1-EVDO,2-TD-SCDMA
	s32				Sim_Exist;		// sim卡是否存在:0-不存在;1-存在.
	s32				Sim_SignalValue;		// 3g信号值
	s32				DialingState;		// g.b.3G拨号状态:0-未拨号;1-拨号中;2-拨号成功;3-拨号失败;
	s32				PhoneState;		// 通话状态:DVR_PHONE_STATE
	s32				NetType;		// 3G网络服务类型:DVR_3G_NET_TYPE
	s8				Sim_ICCIC[24];		// ICCIC
	s8				PppIp[20];		// PppIp
}Info_3g;

/*
wifi信息
*/
typedef struct __tag_Info_wifi {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s32				Module_Exist;		// wifi模块是否存在:0-不存在;1-存在.
	s32				NetState;		// 网络状态:0-网络正常;1-网络异常.
	s32				SignalValue;		// 信号值
	s8				LocalIp[20];		// 本地Ip
	s8				UsedSSID[20];		// 正在使用的SSID
}Info_wifi;

/*
网络信息
*/
typedef struct __tag_Info_network {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s32				cur_network_type;		// 当前网路连接类型:DVR_NETWORK_STATE
	s32				online_protocol;		// g.在线协议:PROTOCOL_TYPE_E
	s8				LocalIP[20];		// 本地IP地址
}Info_network;

/*
b.速度信息
*/
typedef struct __tag_Info_speed {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	u32				curSpeed;		// g.b.当前速度,根据参数设置决定是gps速度或脉冲速度或混合速度(单位:0.01km/h)
	u32				gpsSpeed;		// gps速度(单位:0.01km/h)
	u32				pulseNum;		// g.脉冲数
	u32				pulseTotleNum;		// 脉冲总数,本次开机累计脉冲总数
	u32				pulseSpeed;		// g.b.脉冲速度(单位:0.01km/h)
	u32				Mileage;		// g.b.里程数(单位:0.01km)
}Info_speed;

/*
视频信息
*/
typedef struct __tag_Info_video {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s32				videoLostState;		// 视频丢失状态:按位表示.位偏移号为通道号
	s32				mainRecordState;		// 主录像状态:按位表示.位偏移号为通道号
	s32				mainRecordDiskId;		// 主录像选盘:DISK_ID
	u32				main60sVideoDataSize[10];		// 60秒内视频数据量(下标为通道号,数据量单位:KB)
	u32				main60sRecordDataSize[10];		// 60秒内录像数据量(下标为通道号,数据量单位:KB)
	u32				main60sLostDataSize;		// 60秒内丢失数据量(数据量单位:KB)
	u32				mainCacheUsageRate;		// 缓存使用率
	s32				mirrorRecordState;		// 镜像录像状态:按位表示.位偏移号为通道号
	s32				mirrorRecordDiskId;		// 镜像录像选盘:DISK_ID
	u32				mirror60sVideoDataSize[10];		// 60秒内视频数据量(下标为通道号,数据量单位:KB)
	u32				mirror60sRecordDataSize[10];		// 60秒内录像数据量(下标为通道号,数据量单位:KB)
	u32				mirror60sLostDataSize;		// 60秒内丢失数据量(数据量单位:KB)
	u32				mirrorCacheUsageRate;		// 缓存使用率
	s32				videoOutputStatus;		// 视频输出状态:0-实时监控中,1-回放中
	s32				videoEncoderStatus;		// 视频编码状态:0-编码停止,1-编码停止中,2-编码启动中,3-编码中
	s32             videoPlaybackStatus;    // 视频回放状态:0-停止回放,1-正在回放
	
}Info_video;

/*
传感器信息
*/
typedef struct __tag_Info_sensor {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s32				PowerState;		// b.电源状态:DVR_POWER_STATE
	s32				AccState;		// g.b.acc状态:DVR_ACC_STATE
	s32				HddKeyState;		// 硬盘锁状态:0-未锁,1-锁上
	s32				PowerVoltage;		// 电源电压值(单位:0.01V)
	s32				BatteryVoltage;		// 电池电压值(单位:0.01V)
	s32				AccVoltage;		// Acc电压值(单位:0.01V)
	s32				IOState;		// g.8个开关量:按位表示.
	s32				Analogue[2];		// b.2个模拟量
	s32				boardtemp;		// 主板温度(单位:0.01℃)
	s32				hddtemp;		// 硬盘温度(单位:0.01℃)
	s32				Acceleration[3];		// 加速度:x,y,z方向(单位:0.01g)
	s32				TiltAngle;		// 倾斜角(单位:0.01度)
	s32				OilValue;		// 油量值(单位:0.01L)
}Info_sensor;

/*
磁盘信息
*/
typedef struct __tag_Info_disk {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE
	s32				diskId;		// 磁盘编号:DISK_ID
	u32				totalSize;		// 总容量(单位:MB)
	u32				freeSize;		// 剩余容量(单位:MB)
	s32				diskStatus;		// g.磁盘状态:DISK_STATUS
	s8				diskPath[64];		// g.磁盘路径
}Info_disk;

/*
串口信息
*/
typedef struct __tag_Info_com {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s32				comId;		// 串口编号:COM_ID_E
	s8				comShowName[8];		// 显示名称:232-1,232-2,485-1,485-2
	s32				comLink;		// 连接设备:SERAL_PORT_PERIPHERAL
	s32				lastRecvTime;		// 最后接收数据时间(单位:s),-1:未收
	s32				lastSendTime;		// 最后发送数据时间(单位:s),-1:未发
	s8				ComData[64];		// 存放串口的应用数据
}Info_com;

/*
日志信息
*/
typedef struct __tag_Info_log {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s32				Type;		// 主类型:MDVR_ALARM_TYPE
	s32				Subtype;		// 子类型
	s32				State;		// 状态0
	s32				State1;		// 状态1
	s32				State2;		// 状态2
	s8				StartTime[16];		// 开始时间(格式:20141010-235959)
	s8				EndTime[16];		// 结束时间(格式:20141010-235959)
	s32				MaxNumPerPage;		// 每页最大条目数:最大20条/页
	s32				CurPage;		// 当前页:页数从0开始
	s32				TotleNum;		// 搜索总条数
	s8				logData[2048];		// 搜索日志信息以二进制传出
	s32				DataLen;		// 数据长度
}Info_log;

/*
IPC信息
*/
typedef struct __tag_Info_ipc {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s32				streamType;		// 码流类型:0x01-主码流;0x02-子码流;0x04-镜像码流.
	s8				rtspData[2048];		// rtsp数据(格式:ipcId:(ipcAddr_len)ipcAddr;ipcId.ipcRtspId:(ipcRtspURL_len)ipcRtspURL;)
}Info_ipc;

/*
获取mdvr的当前报警状态,mdvr产生报警时,外部模块可能没有启动好或其它原因导致报警数据没接收到,这种情况下就可以调用这个接口查询
*/
typedef struct __tag_Info_alarmState {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s32				alarmType;		// 报警类型
	s32				alarmSubtype;		// 报警子类型,不关心则填:-1
	s32				alarmState;		// 报警状态
	s32				alarmHoldTime;		// 报警持续时间,不关心可以填:-1
}Info_alarmState;

/*
b.设置链接平台状态
*/
typedef struct __tag_Control_setCMSLinkStatus {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s32				protoclType;		// 协议类别:PROTOCOL_TYPE_E
	s32				linkStatus;		// 连接状态:0--未连接,1-已连接
}Control_setCMSLinkStatus;

/*
b.系统操作
*/
typedef struct __tag_Control_system {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s32				Type;		// 系统操作类别:SYSTEM_CONTROL_TYPE
	s32				Subtype;		// 子类别
	s32				State;		// 状态
	s32				State1;		// 状态1
	s32				State2;		// 状态2
	s8				Data[128];		// 数据
	s32				DataLen;		// 数据长度
}Control_system;

/*
b.重启App
*/
typedef struct __tag_Control_rebootApp {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s8				AppName[32];		// app名称
	s8				AppParam[32];		// app参数,重启时跟在app名称后启动,例:cd /app;killall mytest;./mytest param 
}Control_rebootApp;

/*
视频预览布局控制
*/
typedef struct __tag_Control_VideoPreview {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s32				LayoutMode;		// 布局模式:Video_Layout_Mode
	s32				ShowPage;		// 显示页
	s32				user_x[10];		// 用户自定义布局_x,坐标和宽高均按整屏尺寸千分比计算(0~1000)
	s32				user_y[10];		// 用户自定义布局_y
	s32				user_w[10];		// 用户自定义布局_w,当宽高为0时，对应下标通道号隐藏
	s32				user_h[10];		// 用户自定义布局_h
}Control_VideoPreview;

/*
录像搜索
*/
typedef struct __tag_Control_VideoSearch {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s8				StartTime[16];		// 开始时间:1,搜年月(201410),返回该月每天是否有录像;2,搜年月日(20141010),返回该天每分钟是否有录像;3,搜年月日时分秒(20141010-050101),返回具体的录像文件列表;
	s8				EndTime[16];		// 结束时间(格式:20141010-235959)
	s32				RecDisk;		// 存储介质:0-所有磁盘;1-硬盘;2-SD1;3-SD2;4-备份硬盘
	s32				RecType;		// 录像类型:0-所有录像;1-普通录像;2-报警录像;101-图片查询
	s32				MaxNumPerPage;		// 每页最大条目数:最大20条/页
	s32				CurPage;		// 当前页:页数从0开始
	s32				TotleNum;		// 搜索总条数
	s8				RecData[2048];		// 录像搜索数据(格式:1,长度31的01字符串;2,长度1440的01字符串;3,序号,录像全路径,开始日期-开始时间-结束时间,录像类型,文件大小;)
}Control_VideoSearch;

/*
录像回放
*/
typedef struct __tag_Control_VideoPlayback {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s32				CtrlMode;		// 控制模式:Video_CTRL_Mode
	s8				RecPath[128];		// 录像路径
	s32				OffsetTime;		// 回放偏移时间:指相对于录像开始时间的偏移时间,单位:s
	s32				LayoutMode;		// 布局模式:Video_Layout_Mode
	s32				ShowPage;		// 显示页
}Control_VideoPlayback;

/*
录像文件操作
*/
typedef struct __tag_Control_Record_File {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s32				CtrlMode;		// 控制文件模式:0:停止导出，1:开始导出，10:删除，11:解锁，12:锁定
	s8				RecordPath[128];		// 录像文件路径,如:/mnt/sd1/rec_dir/a.264
	s8				ExportPath[128];		// 导出文件路径,如:/mnt/udisk/b.264
	s8				StartTime[16];		// 导出开始时间:(格式:20160826-000101)
	s8				EndTime[16];		// 导出结束时间(格式:20160826-235959)
	u32				chnMask;		// 导出通道掩码
	s32				ExportState;		// 导出状态,0:准备导出,1:录像文件打开出错,2:源文件无指定时间段录像,3:导出文件打开出错,4:录像文件读出错,5:导出文件写出错,6:导出中,7:导出结束
	s32				Percentage;		// 导出百分比
}Control_Record_File;

/*
b.生成多媒体文件
*/
typedef struct __tag_Control_createMultimediaFile {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s32				fileType;		// 文件类型:MULTIMEDIAFILE_TYPE
	s8				fileName[256];		// 文件路径,按照给定文件名生成指定文件
	s32				channelNo;		// 通道号
	s32				timeLong;		// 时长
}Control_createMultimediaFile;

/*
b.电话控制
*/
typedef struct __tag_Control_opTel {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s32				tel_op;		// 电话操作方式:TEL_OP_TYPE
	s8				tel_no[20];		// 电话号码
	s32				telVolume;		// 通话音量,0-10,0:监听,1-10:通话
}Control_opTel;

/*
管理电话本
*/
typedef struct __tag_Control_manageTelbook {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s32				telOpType;		// 电话本操作方式:TELBOOK_OP_TYPE
	s8				telName[20];		// 姓名
	s8				telNumber[20];		// 电话号码
	s32				telType;		// 号码备注:TEL_NUMBER_ATTRIBUTE
}Control_manageTelbook;

/*
电话本查询
*/
typedef struct __tag_Control_TelBookSearch {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s32				SerachOpType;		// 电话本查询操作方式:TELBOOK_SEARCH_OP_TYPE
	s32				CallOpType;		// 通话记录查询属性:CALL_LOG_TYPE
	s32				MaxNumPerPage;		// 每页最大条目数:最大20条/页
	s32				CurPage;		// 当前页:按页数(页数从0开始)返回搜索结果
	s32				TotleNum;		// 搜索总条数
	s8				Data[1024];		// 搜索数据(格式:1,姓名,号码,备注,...;)
}Control_TelBookSearch;

/*
发短信
*/
typedef struct __tag_Control_sendSMS {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s8				smsNum[20];		// 电话号码
	s8				smsContent[200];		// 短信内容
}Control_sendSMS;

/*
控制云台的操作
*/
typedef struct __tag_Control_PTZProc {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s32				cmd;		// 操作PTZ的命令
	s32				CHx;		// 通道号
	s32				speed;		// 速度
	s32				preset;		// 调整
}Control_PTZProc;

/*
信息管理,存储平台下发消息并回查
*/
typedef struct __tag_Control_Message {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s32				infoType;		// 信息类别:BB_INFO_TYPE
	s32				infoId;		// 信息编号,set,send时:infoId==-1删除infoType类信息;get时:infoId==-1查询返回infoType信息标题列表,分页取,可按时间搜索
	s32				itemId;		// 信息项编号,set,send时:itemId==-1时删除infoType->infoId信息;get时:itemId==0取info标题,itemId==-1取info内容项列表,分页取,itemId>0取info内容指定项
	s8				Data[1024];		// 信息内容,set,send时:Data为空删除infoType->infoId->itemId的信息项;get时:按查询条件返回列表或内容
	s32				remark;		// 信息属性:BB_INFO_REMARK
	s8				StartTime[20];		// 开始时间(格式:20141009-000000)
	s8				EndTime[20];		// 结束时间(格式:20141010-235959)
	u32				MaxNumPerPage;		// 每页最大条目数:最大20条/页
	u32				CurPage;		// 当前页:按页数(页数从0开始)返回搜索结果
	s32				TotleNum;		// 搜索总条数
}Control_Message;

/*
g.信息发送
*/
typedef struct __tag_Control_sendInfo {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s8				Data[1024];		// 信息内容:必须是可打印字符
	s32				DataSize;		// 信息长度
	s32				remark;		// 信息属性:BB_INFO_REMARK
}Control_sendInfo;

/*
控制OSD信息:调整坐标和字符最大长度会启停编码,只改内容时坐标值和最大长度填-1.
*/
typedef struct __tag_Control_OSD_Info {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s32				osdId;		// osd区域编号
	s8				txtcontent[32];		// OSD叠加内容
}Control_OSD_Info;

/*
LCD屏信息显示
*/
typedef struct __tag_Control_LCD_InfoShow {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s8				Data[1024];		// 显示信息内容
	s32				DataLen;		// 信息长度
	s32				bgFrame;		// 显示背景框:0-无;1-有
	s32				StartRow;		// 显示开始行
	s32				SelectedRow;		// 反显行
	s32				SelectedCol;		// 反显列
	s32				SelectedLen;		// 反显字符长度
}Control_LCD_InfoShow;

/*
发送页面键值
*/
typedef struct __tag_Control_SendPageKeyid {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s32				pageId;		// 页面编号
	s32				ctrlId;		// 控件编号
	s32				keyId;		// 按键值
	s32				chn;		// 通道号
	s32				x;		// x
	s32				y;		// y
	s32				w;		// w
	s32				h;		// h
	s32				result;		// 返回结果
}Control_SendPageKeyid;

/*
g.数据下行透传
*/
typedef struct __tag_Control_data_transit {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s32				DataType;		// 数据类型:SERAL_PORT_PERIPHERAL
	s8				Data[2048];		// 透传数据:可以为2进制数据,长度不可大于1024
	s32				DataSize;		// 数据长度
	s32				ComId;		// 串口号
}Control_data_transit;

/*
b.透传部标ic卡信息,注:仅为透传结构体使用,不能作指令结构体
*/
typedef struct __tag_tr_bbIcCardInfo {
	s32				swipeAction;		// 刷卡动作:1=插入,2=拔出
	s32				swipeResult;		// 刷卡结果:0=读卡成功,1-读卡失败(认证未通过),2-读卡失败(卡被锁),3-读卡失败(卡被拔出),4-读卡失败(数据校验错误)
	s32				DriverNameLen;		// 驾驶员姓名长度
	s8				DriverName[64];		// 驾驶员姓名
	s8				CertificateNumber[40];		// 从业资格证的编号,固定20字节,不足补0x00
	s32				OrganizationNameLen;		// 机构名称长度
	s8				OrganizationName[64];		// 从业资格证的发证机构
	s8				ValidityPeriod[4];		// 有效期:YYYYMMDD
}tr_bbIcCardInfo;

/*
g.透传国标ic卡信息,注:仅为透传结构体使用,不能作指令结构体
*/
typedef struct __tag_tr_gbIcCardInfo {
	s8				rev[32];		// 预留32个字节，芯片厂商固化信息或用户自定义信息
	s8				driver_license[18];		// 机动车驾驶证号码:ASCⅡ码,18个字节,不足时以00H补齐
	s8				driver_license_valid_year;		// 驾驶证有效期-年:00～99（BCD 码）
	s8				driver_license_valid_mouth;		// 驾驶证有效期-月:01～12（BCD 码）
	s8				driver_license_valid_day;		// 驾驶证有效期-日:01～31（BCD 码）
	s8				qualification_certificate[18];		// 从业资格证号,ASCⅡ码,18个字节,不足时以00H补齐
	s8				standard_rev[56];		// 标准扩展预留56个字节,不足时以00H补齐
	s8				crc;		// 校验字:异或校验
}tr_gbIcCardInfo;

/*
b.设备基本信息
*/
typedef struct __tag_Param_BbInfo {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s8				SimNum[20];		// 电话号码
	s8				IP0[20];		// 主ip
	s32				Port0;		// 主端口
	s8				IP1[20];		// 备ip
	s32				Port1;		// 备端口
}Param_BbInfo;

/*
g.系统时间
*/
typedef struct __tag_Param_System_Time {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	u32				Year;		// 年:1900-2025
	u8				Month;		// 月:1-12
	u8				Day;		// 日:1-31
	u8				Hour;		// 时:0-23
	u8				Minute;		// 分:0-59
	u8				Second;		// 秒:0-59
}Param_System_Time;

/*
系统参数配置
*/
typedef struct __tag_Param_System_Info {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s32				SysLanguage;		// 系统语言:0-中文,1-英文,2-繁体中文
	s32				MonitorNum;		// 通道数:4-4通道,8-8通道
	s32				MdvrType;		// 机型:MDVR_TYPE_E
	u32				LinkProtocol;		// 开启协议:PROTOCOL_TYPE_E
	s8				BbProcotolType;		// b.部标协议类型:BB_PROTOCOL_TYPE
	s8				DrProcotolType;		// 行驶记录仪协议类型:0-2003版本,1-2012版本
	s8				SoftwareVer[64];		// 软件版本号
	s8				HardWareVer[32];		// 硬件版本号
	s8				MCUVersion[32];		// 单片机版本号
}Param_System_Info;

/*
基本设置
*/
typedef struct __tag_Param_Base_Info {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	u8				DateType;		// 0-年月日,1-日月年,2-月日年,default:0
	u8				TimingMode;		// 0,关闭1,GPS校时2,NTP校时
	u8				TimeZone;		// 时区:-12至+13共26个时区,每个时区有:00,:15,:30,:45四个刻度点从小到大用0-104来表示
	u8				buzzerSwitch;		// 蜂鸣器总开关:0--关;1--开,各种报警可以开启自己的分开关,但只有总开关开启时,分开关才有效
	u32				timingtime;		// 校时时间点,单位秒
	u8				verifyChip;		// 验证芯片失败次数
	u16				OprTimeOut;		// 操作超时:30~3600,default:30s
}Param_Base_Info;

/*
b.设备信息
*/
typedef struct __tag_Param_Terminal_Info {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s8				device_num[20];		// 机号(范围:000000~999999)
	s8				Phonenumber[20];		// b.手机号
	s8				VideoID[20];		// 视频ID
	s8				license_num[20];		// g.b.车牌号码
	s8				company_name[20];		// 公司名称
	s8				ServiceTel[20];		// 服务电话
	s8				Provincial_id[4];		// b.省域ID
	s8				CityDomain_id[6];		// b.市域ID
	s8				Carcolors[10];		// g.b.车颜色
	s8				Authentication[20];		// b.鉴权码
	s8				TerminalType[20];		// b.终端型号
	s8				TerminalID[20];		// b.终端ID
	s8				FacturerID[20];		// b.厂商ID facturer
	s8				CarVIN[20];		// g.b.车辆VIN (车架号)
	s8				CarType[20];		// g.b.车辆类型
	s8				DrivingLicense[20];		// g.b.驾驶证号
}Param_Terminal_Info;

/*
开关机设置
*/
typedef struct __tag_Param_SysPowerSet {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	u32				PowerMode;		// 开关机模式:1--点火模式,2--定时模式,3--待机模式,4--休眠模式,default:1
	u32				DelayTime;		// 延时关机时(单位分):0min~1440min,default:5min
	u32				ScreenOffTime;		// 屏保延时时间(单位分):0为不启用屏保,0min~1440min,default:0
	u32				PowerOnTime;		// 开机时间(单位:秒),hour*3600+min*60+sec
	u32				PowerOffTime;		// 关机时间(单位:秒),hour*3600+min*60+sec
	s32				LayoutMode;		// 开机监控画面布局:Video_Layout_Mode
	s32				ShowPage;		// 显示页
	s32				AccPowerOffRecEnable;		// ACC延时关机后录使能
}Param_SysPowerSet;

/*
安全设置
*/
typedef struct __tag_Param_SecuritySet {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s32				PasswordEnable;		// 密码使能:0--关闭,1--启动,default:1,关闭后登录不需要输入密码,拥有管理员权限,开启后凭密码区分管理员还是普通用户
	s8				AdminPassword[8];		// 管理员密码(6个数字)
	s8				UserPassword[8];		// 普通用户密码(6个数字),要求两组密码不能一样
}Param_SecuritySet;

/*
录像设置
*/
typedef struct __tag_Param_RecordSet {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s32				SysNorm;		// 视频制式:0--PAL,1--NTSC,default:0
	s32				RecMode;		// 录像模式:0--开机录像;1--定时录像;2--报警录像,default:0
	s32				AlarmPreRecTime;		// 报警录像预录时间(单位:s)[0,60],default:30
	s32				AlarmRecDelayTime;		// 报警录像延时时间(单位:s)[120,3600],default:300
	s32				AlarmRecFileProtectTm;		// 报警录像文件保护时间(单位:天)[3,45]
	s32				AudioType;		// 音频类型:0--G711A;1--G726(暂时只支持G726)
	s32				AOVolume;		// 音频输出增益[0,15]
	s32				CameraType;		// 摄像头类型:0-普通,1-高清
	s32				DisplayType;		// 分别率类型:0:720X576,1-VGA1024X768,2-VGA1280X720
}Param_RecordSet;

/*
前端osd设置
*/
typedef struct __tag_Param_FrontOsdSet {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s8				ChlName0[8];		// 1通道名称,限6个字符长度
	s8				ChlName1[8];		// 2通道名称
	s8				ChlName2[8];		// 3通道名称
	s8				ChlName3[8];		// 4通道名称
	s8				ChlName4[8];		// 5通道名称
	s8				ChlName5[8];		// 6通道名称
	s8				ChlName6[8];		// 7通道名称
	s8				ChlName7[8];		// 8通道名称
	s8				ChlName8[8];		// 9通道名称
	s8				ChlName9[8];		// 10通道名称
	s8				ChlName10[8];		// 11通道名称
	s8				ChlName11[8];		// 12通道名称
	s8				ChlName12[8];		// 13通道名称
	s8				ChlName13[8];		// 14通道名称
	s8				ChlName14[8];		// 15通道名称
	s8				ChlName15[8];		// 16通道名称
}Param_FrontOsdSet;

/*
显示设置
*/
typedef struct __tag_Param_DisplaySet {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s32				Bright;		// 亮度,0~100刻度
	s32				Color;		// 色度,0~100刻度
	s32				Contrast;		// 对比度,0~100刻度
	s32				Saturation;		// 饱和度,0~100刻度
}Param_DisplaySet;

/*
视频输出位置设置
*/
typedef struct __tag_Param_VideoOutputSet {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s32				vo_loopTime;		// 自动循环通道时间:0不循环;>0为自动切通道间隔时间
	s32				vo_showNum;		// 显示通道数
	s32				vo_x[16];		// 通道显示x坐标,要求坐标和宽高的值都是8的整数倍
	s32				vo_y[16];		// 通道显示y坐标
	s32				vo_w[16];		// 通道显示宽度
	s32				vo_h[16];		// 通道显示高度
}Param_VideoOutputSet;

/*
定时录像时间段设置
*/
typedef struct __tag_Param_RecordTimerSet {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s32				id;		// 下标0至6分别对应星期天到星期六,7对应每一天
	s32				start_rec1;		// 开始时间1(单位:秒),hour*3600+min*60+sec
	s32				end_rec1;		// 结束时间1(单位:秒),hour*3600+min*60+sec
	s32				start_rec2;		// 开始时间2(单位:秒),hour*3600+min*60+sec
	s32				end_rec2;		// 结束时间2(单位:秒),hour*3600+min*60+sec
}Param_RecordTimerSet;

/*
录像编码设置
*/
typedef struct __tag_Param_RecordCodeSet {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s32				StreamType;		// 码流类型:0--主码流;1--子码流;2--镜像码流
	s32				ChId;		// 通道号:0-7
	s32				isRec;		// 录象使能:0--关闭,1--开启
	s32				Resolution;		// 分辨绿:0--RES_D1,1--RES_HD1,2--RES_CIF,3--RES_QCIF
	s32				FrameRate;		// 帧率:1~25(PAL),1~30(NTSC)
	s32				Quality;		// 画质:0~7,0 最清晰,default:2
	s32				HaveAudio;		// 录音:0--关闭,1--开启
	s32				isPreview;		// 预览:0--关闭,1--开启
}Param_RecordCodeSet;

/*
IPC设置
*/
typedef struct __tag_Param_IPCSet {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s32				Enable;		// 使能:1-enable,0-disable
	s32				ChId;		// 通道号:0-7
	u32				DevType;		// 设备类型:0--IPC;1-DVR
	u32				Protocol;		// 协议:0--ONVIF;1-自定义
	u32				ChlNo;		// 远端通道号
	s8				CameraIP[20];		// IP
	u16				CameraPort;		// 端口
	s8				UserName[20];		// 用户名
	s8				UserPwd[20];		// 用户密码
	s8				rtspUrl_0[256];		// IPC主码流
	s8				rtspUrl_1[256];		// IPC子码流
	s32				Width[2];		// 视频宽
	s32				Height[2];		// 视频高
}Param_IPCSet;

/*
磁盘管理设置
*/
typedef struct __tag_Param_DiskUseSet {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s32				diskId;		// 磁盘号:DISK_ID
	s32				RecUse;		// 录像用途:0-无,1-主录像,2-镜像录像,3-子码流录像
	s32				RecPriority;		// 录像优先级:0-4 ;默认2
	s32				SecondPart;		// 第二分区大小(单位:)
	s32				RecFileSize;		// 预分配录像文件大小(单位:M)
}Param_DiskUseSet;

/*
网络参数,共有8组ip地址
*/
typedef struct __tag_Param_CenterNetWork {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s32				id;		// 中心IP序号:0~7;0-视频服务器;1-gps服务器;2-备gps服务器;3~6-预留;7-升级ftp服务器(用户名和密码以空格间隔填到域名位置)
	u8				Enable;		// 使能:1-enable,0-disable
	u8				Type;		// 类型:0-使用ip,1-使用域名
	s8				CenterIP[20];		// 中心IP
	s32				ContrlPort;		// 控制端口
	s8				DomainName[64];		// 服务器域名
}Param_CenterNetWork;

/*
本地网络参数
*/
typedef struct __tag_Param_LocalNetWork {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s8				linkType;		// 连接类型:0-有线网,1-外置wifi,2-外设
	s8				ipaddr[20];		// IP
	s8				netmask[20];		// 掩码
	s8				gateway[20];		// 网关
	s8				dns1[20];		// DNS
	s8				dns2[20];		// DNS
	s8				mac[20];		// MAC地址
}Param_LocalNetWork;

/*
3G拨号参数
*/
typedef struct __tag_Param_DialSet {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	u8				isOpen;		// 1--启用无线拨号,0---不启用
	u8				DialType;		// 网络制式:NET_STANDARD:default---WCDMA
	u8				AuthMode;		// 认证模式:0:CHAP 1:APA default CHAP
	s8				APN[40];		// 接入点:default---3gnet
	s8				CenterNum[40];		// 中心号码:default---*99#
	s8				SMSC[40];		// 短信中心
	s8				UserName[40];		// 用户名:default---card
	s8				UserPwd[40];		// 用户密码:default---card
}Param_DialSet;

/*
WIFI参数
*/
typedef struct __tag_Param_WIFISet {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	u8				isOpen;		// wifi使能:1--启用,0--不启用
	u8				EncryptSw;		// 加密使能:1--密码开启,0--密码关闭
	u8				AuthMode;		// 认证模式:0--开放式,1--共享式,2--WPA,3--WPA-PSK
	u8				Encrypt;		// 加密类型:0--NONE,1--WEP,2--TKIP,3--AES,
	u8				Purpose;		// WIFI用途:0--Station,1--AP
	s8				SSID[20];		// SSID
	s8				UserPwd[20];		// 密码
	s8				IpAddr[20];		// IP地址
	s8				SubNet[20];		// 子网掩码
	s8				GateWay[20];		// 网关
}Param_WIFISet;

/*
速度参数:
*/
typedef struct __tag_Param_SpeedSet {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s32				SpeedSource;		// g.速度来源:0-GPS速度,1-脉冲速度,2-混合速度(取GPS速度和脉冲速度的较小非0值)
	s32				SpeedUnit;		// g.速度单位:0-Km/s,1-MPH
	s32				PulseNum;		// g.b.脉冲与速度之间的系数
	s32				PositioningMode;		// 定位模式:0x01-单GPS,0x02-单北斗,0x03-双模模式
	s32				id;		// 速度报警类别:DVR_SPEED_ALARM_STATE
	s32				Enable;		// 使能:0--关闭,1--开启
	s32				LimitValue;		// 报警阀值(单位:km/h)
	s32				HoldTime;		// 持续时间(单位:s)
	s32				DelayTime;		// 报警延时(单位:s)
	s32				isRecord;		// 触发录像:1--触发,0--不触发,default:0
	s32				linkage;		// 报警联动:ALARM_LINKAGE_E,只触发电平输出
}Param_SpeedSet;

/*
加速度参数:
*/
typedef struct __tag_Param_G_SensorSet {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s32				unit;		// 单位
	s32				BrakeDirect;		// 急刹车报警方向,0--x,1--y,2--z方向
	s32				id;		// 加速度报警类别:0-x,1-y,2-z,3-碰撞,4-倾斜角
	s32				Enable;		// 使能:0--关闭,1--开启
	s32				LimitValue;		// 报警阀值(单位:g或°)
	s32				HoldTime;		// 持续时间(单位:ms)
	s32				DelayTime;		// 报警延时(单位:s)
	s32				isRecord;		// 触发录像:1--触发,0--不触发,default:0
	s32				linkage;		// 报警联动:ALARM_LINKAGE_E,只触发电平输出
}Param_G_SensorSet;

/*
温度参数:
*/
typedef struct __tag_Param_TemperateSet {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	u8				TempUnit;		// 0--摄氏度,1--华氏度
	s32				id;		// 速度报警类别:0--低温报警,1--高温报警
	s32				Enable;		// 使能:0--关闭,1--开启
	s32				LimitValue;		// 报警阀值(单位:℃)
	s32				HoldTime;		// 持续时间(单位:s)
	s32				DelayTime;		// 报警延时(单位:s)
	s32				isRecord;		// 触发录像:1--触发,0--不触发,default:0
	s32				linkage;		// 报警联动:ALARM_LINKAGE_E,只触发电平输出
}Param_TemperateSet;

/*
电压参数:
*/
typedef struct __tag_Param_VoltageSet {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	u8				VoltageShutdownDelay;		// 低压关机延时(单位:min)
	s32				id;		// 速度报警类别:0--掉电报警,1--低压报警,2--高压报警
	s32				Enable;		// 使能:0--关闭,1--开启
	s32				LimitValue;		// 报警阀值(单位:伏)
	s32				HoldTime;		// 持续时间(单位:s)
	s32				DelayTime;		// 报警延时(单位:s)
	s32				isRecord;		// 触发录像:1--触发,0--不触发,default:0
	s32				linkage;		// 报警联动:ALARM_LINKAGE_E,只触发电平输出
}Param_VoltageSet;

/*
移动侦测参数:
*/
typedef struct __tag_Param_MotionDetctionSet {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s32				id;		// 通道号:0~7
	u8				Sensitivity;		// 灵敏度:0~7
	s32				Enable;		// 使能:0--关闭,1--开启
	s32				LimitValue;		// 报警阀值(单位:区域百分比)
	s32				HoldTime;		// 持续时间(单位:s)
	s32				DelayTime;		// 报警延时(单位:s)
	s32				isRecord;		// 触发录像:1--触发,0--不触发,default:0
	s32				linkage;		// 报警联动:ALARM_LINKAGE_E,只触发电平输出
	u32				DetectRegion_x;		// 侦测区域_x(坐标按千分比定义)
	u32				DetectRegion_y;		// 侦测区域_y
	u32				DetectRegion_w;		// 侦测区域_w
	u32				DetectRegion_h;		// 侦测区域_h
	s32				start_rec1;		// 开始时间1(单位:秒),hour*3600+min*60+sec
	s32				end_rec1;		// 结束时间1(单位:秒),hour*3600+min*60+sec
	s32				start_rec2;		// 开始时间2(单位:秒),hour*3600+min*60+sec
	s32				end_rec2;		// 结束时间2(单位:秒),hour*3600+min*60+sec
	s32				snapEnable;		// 图片抓拍使能
	s32				snapPicNum;		// 图片张数
	s32				snapInterval;		// 抓拍每一张图片之间的时间间隔
}Param_MotionDetctionSet;

/*
IO报警参数:
*/
typedef struct __tag_Param_IoSet {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s32				id;		// IO编号:0~7
	s8				Name[16];		// IO名称
	s32				Enable;		// 使能:0--关闭,大于0--DVR_IO_TYPE
	s32				LimitValue;		// 报警阀值(报警电平):1--高电平或常开,0--低电平或常闭,default:1
	s32				HoldTime;		// 防抖次数(单位:次)防抖动,连续检测次数,全0或全1方为有效输入
	s32				DelayTime;		// 报警延时(单位:s):在输入延时时间内来的第二个报警并入第一个报警
	s32				isRecord;		// 触发录像:1--触发,0--不触发,default:0
	s32				linkage;		// 报警联动:ALARM_LINKAGE_E
	s32				HomePageChannel;		// 关联直通画面通道号(1-7),0不关联,default:0
}Param_IoSet;

/*
云台设置参数
*/
typedef struct __tag_Param_PTZSet {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	u8				chId;		// 通道ID:0~7
	u8				Protocol;		// 协议类型,0--Pelco-D;1--Pelco-P
	u8				Number;		// 编号,范围为1~63
	u8				Perset;		// 预置位值,范围为0x1~0xff
}Param_PTZSet;

/*
串口设置参数
*/
typedef struct __tag_Param_SerialPortSet {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	u8				SerialId;		// 串口ID:0~3;100-重新初始化所有串口;101-设置串口为测试模式
	u8				Baudrate;		// 波特率:(0~9):600,1200,1800,2400,4800,9600,19200,38400,57600,115200
	u8				DataBit;		// 数据位:(0~8):0,1,2,3,4,5,6,7,8
	u8				StopBit;		// 停止位:0-1,1-1.5,2-2
	u8				CheckBit;		// 校检位 :0-Even,1-Odd,2-None,3-Mark,4-Space
	u8				ControlBit;		// 流控位:0-XON,1-HD,2-NO
	u32				Peripheral;		// 外设:SERAL_PORT_PERIPHERAL
}Param_SerialPortSet;

/*
用户自定义参数,与系统运行无关参数
*/
typedef struct __tag_Param_UserDefinde {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	u8				Param_Id;		// 参数ID:USER_DEFINED_ID_E
	s32				intParam[8];		// 整形参数
	double				doubleParam;		// 整形参数
	s8				charParam[16];		// 字符串参数1--仅提供8组
}Param_UserDefinde;

/*
事件格式
*/
typedef struct __tag_SYSTEM_EVENT {
	u32				MESSAGE_ID;		// 消息ID
	s32				MESSAGE_TYPE;		// 消息类别:MESSAGE_TYPE_E
	s8				Source[16];		// 事件来源
	s32				Type;		// 主类型:MDVR_ALARM_TYPE
	s32				Subtype;		// 子类型
	s32				State;		// 状态0
	s32				State1;		// 状态1
	s32				State2;		// 状态2
	s8				Data[2048];		// 数据:对透传数据可以是2进制数据,长度必须小于1024;非透传数据必需是可打印字符,长度小于2048
	s32				DataLen;		// 数据长度
}SYSTEM_EVENT;


//sdk接口宏定义 mdvrsdk.h
#define __mdvrsdk_h_define_ 	\
	/*注册SDK*/	\
	int getStructId(Sdk_register pdata);	\
	int getDate(Sdk_register *pdata, int timeout = 10);	\
	int setDate(Sdk_register *pdata, int timeout = 10);	\
	int sendDate(Sdk_register *pdata, int timeout = 10);	\
	/*注销SDK*/	\
	int getStructId(Sdk_unregister pdata);	\
	int getDate(Sdk_unregister *pdata, int timeout = 10);	\
	int setDate(Sdk_unregister *pdata, int timeout = 10);	\
	int sendDate(Sdk_unregister *pdata, int timeout = 10);	\
	/*看门狗*/	\
	int getStructId(Sdk_watchDog pdata);	\
	int getDate(Sdk_watchDog *pdata, int timeout = 10);	\
	int setDate(Sdk_watchDog *pdata, int timeout = 10);	\
	int sendDate(Sdk_watchDog *pdata, int timeout = 10);	\
	/*g.b.读取参数路径*/	\
	int getStructId(Info_getParamPath pdata);	\
	int getDate(Info_getParamPath *pdata, int timeout = 10);	\
	int setDate(Info_getParamPath *pdata, int timeout = 10);	\
	int sendDate(Info_getParamPath *pdata, int timeout = 10);	\
	/*gps信息*/	\
	int getStructId(Info_gps pdata);	\
	int getDate(Info_gps *pdata, int timeout = 10);	\
	int setDate(Info_gps *pdata, int timeout = 10);	\
	int sendDate(Info_gps *pdata, int timeout = 10);	\
	/*b.GPS原始信息*/	\
	int getStructId(Info_gpsOriginalData pdata);	\
	int getDate(Info_gpsOriginalData *pdata, int timeout = 10);	\
	int setDate(Info_gpsOriginalData *pdata, int timeout = 10);	\
	int sendDate(Info_gpsOriginalData *pdata, int timeout = 10);	\
	/*3g信息*/	\
	int getStructId(Info_3g pdata);	\
	int getDate(Info_3g *pdata, int timeout = 10);	\
	int setDate(Info_3g *pdata, int timeout = 10);	\
	int sendDate(Info_3g *pdata, int timeout = 10);	\
	/*wifi信息*/	\
	int getStructId(Info_wifi pdata);	\
	int getDate(Info_wifi *pdata, int timeout = 10);	\
	int setDate(Info_wifi *pdata, int timeout = 10);	\
	int sendDate(Info_wifi *pdata, int timeout = 10);	\
	/*网络信息*/	\
	int getStructId(Info_network pdata);	\
	int getDate(Info_network *pdata, int timeout = 10);	\
	int setDate(Info_network *pdata, int timeout = 10);	\
	int sendDate(Info_network *pdata, int timeout = 10);	\
	/*b.速度信息*/	\
	int getStructId(Info_speed pdata);	\
	int getDate(Info_speed *pdata, int timeout = 10);	\
	int setDate(Info_speed *pdata, int timeout = 10);	\
	int sendDate(Info_speed *pdata, int timeout = 10);	\
	/*视频信息*/	\
	int getStructId(Info_video pdata);	\
	int getDate(Info_video *pdata, int timeout = 10);	\
	int setDate(Info_video *pdata, int timeout = 10);	\
	int sendDate(Info_video *pdata, int timeout = 10);	\
	/*传感器信息*/	\
	int getStructId(Info_sensor pdata);	\
	int getDate(Info_sensor *pdata, int timeout = 10);	\
	int setDate(Info_sensor *pdata, int timeout = 10);	\
	int sendDate(Info_sensor *pdata, int timeout = 10);	\
	/*磁盘信息*/	\
	int getStructId(Info_disk pdata);	\
	int getDate(Info_disk *pdata, int timeout = 10);	\
	int setDate(Info_disk *pdata, int timeout = 10);	\
	int sendDate(Info_disk *pdata, int timeout = 10);	\
	/*串口信息*/	\
	int getStructId(Info_com pdata);	\
	int getDate(Info_com *pdata, int timeout = 10);	\
	int setDate(Info_com *pdata, int timeout = 10);	\
	int sendDate(Info_com *pdata, int timeout = 10);	\
	/*日志信息*/	\
	int getStructId(Info_log pdata);	\
	int getDate(Info_log *pdata, int timeout = 10);	\
	int setDate(Info_log *pdata, int timeout = 10);	\
	int sendDate(Info_log *pdata, int timeout = 10);	\
	/*IPC信息*/	\
	int getStructId(Info_ipc pdata);	\
	int getDate(Info_ipc *pdata, int timeout = 10);	\
	int setDate(Info_ipc *pdata, int timeout = 10);	\
	int sendDate(Info_ipc *pdata, int timeout = 10);	\
	/*获取mdvr的当前报警状态,mdvr产生报警时,外部模块可能没有启动好或其它原因导致报警数据没接收到,这种情况下就可以调用这个接口查询*/	\
	int getStructId(Info_alarmState pdata);	\
	int getDate(Info_alarmState *pdata, int timeout = 10);	\
	int setDate(Info_alarmState *pdata, int timeout = 10);	\
	int sendDate(Info_alarmState *pdata, int timeout = 10);	\
	/*b.设置链接平台状态*/	\
	int getStructId(Control_setCMSLinkStatus pdata);	\
	int getDate(Control_setCMSLinkStatus *pdata, int timeout = 10);	\
	int setDate(Control_setCMSLinkStatus *pdata, int timeout = 10);	\
	int sendDate(Control_setCMSLinkStatus *pdata, int timeout = 10);	\
	/*b.系统操作*/	\
	int getStructId(Control_system pdata);	\
	int getDate(Control_system *pdata, int timeout = 10);	\
	int setDate(Control_system *pdata, int timeout = 10);	\
	int sendDate(Control_system *pdata, int timeout = 10);	\
	/*b.重启App*/	\
	int getStructId(Control_rebootApp pdata);	\
	int getDate(Control_rebootApp *pdata, int timeout = 10);	\
	int setDate(Control_rebootApp *pdata, int timeout = 10);	\
	int sendDate(Control_rebootApp *pdata, int timeout = 10);	\
	/*视频预览布局控制*/	\
	int getStructId(Control_VideoPreview pdata);	\
	int getDate(Control_VideoPreview *pdata, int timeout = 10);	\
	int setDate(Control_VideoPreview *pdata, int timeout = 10);	\
	int sendDate(Control_VideoPreview *pdata, int timeout = 10);	\
	/*录像搜索*/	\
	int getStructId(Control_VideoSearch pdata);	\
	int getDate(Control_VideoSearch *pdata, int timeout = 10);	\
	int setDate(Control_VideoSearch *pdata, int timeout = 10);	\
	int sendDate(Control_VideoSearch *pdata, int timeout = 10);	\
	/*录像回放*/	\
	int getStructId(Control_VideoPlayback pdata);	\
	int getDate(Control_VideoPlayback *pdata, int timeout = 10);	\
	int setDate(Control_VideoPlayback *pdata, int timeout = 10);	\
	int sendDate(Control_VideoPlayback *pdata, int timeout = 10);	\
	/*录像文件操作*/	\
	int getStructId(Control_Record_File pdata);	\
	int getDate(Control_Record_File *pdata, int timeout = 10);	\
	int setDate(Control_Record_File *pdata, int timeout = 10);	\
	int sendDate(Control_Record_File *pdata, int timeout = 10);	\
	/*b.生成多媒体文件*/	\
	int getStructId(Control_createMultimediaFile pdata);	\
	int getDate(Control_createMultimediaFile *pdata, int timeout = 10);	\
	int setDate(Control_createMultimediaFile *pdata, int timeout = 10);	\
	int sendDate(Control_createMultimediaFile *pdata, int timeout = 10);	\
	/*b.电话控制*/	\
	int getStructId(Control_opTel pdata);	\
	int getDate(Control_opTel *pdata, int timeout = 10);	\
	int setDate(Control_opTel *pdata, int timeout = 10);	\
	int sendDate(Control_opTel *pdata, int timeout = 10);	\
	/*管理电话本*/	\
	int getStructId(Control_manageTelbook pdata);	\
	int getDate(Control_manageTelbook *pdata, int timeout = 10);	\
	int setDate(Control_manageTelbook *pdata, int timeout = 10);	\
	int sendDate(Control_manageTelbook *pdata, int timeout = 10);	\
	/*电话本查询*/	\
	int getStructId(Control_TelBookSearch pdata);	\
	int getDate(Control_TelBookSearch *pdata, int timeout = 10);	\
	int setDate(Control_TelBookSearch *pdata, int timeout = 10);	\
	int sendDate(Control_TelBookSearch *pdata, int timeout = 10);	\
	/*发短信*/	\
	int getStructId(Control_sendSMS pdata);	\
	int getDate(Control_sendSMS *pdata, int timeout = 10);	\
	int setDate(Control_sendSMS *pdata, int timeout = 10);	\
	int sendDate(Control_sendSMS *pdata, int timeout = 10);	\
	/*控制云台的操作*/	\
	int getStructId(Control_PTZProc pdata);	\
	int getDate(Control_PTZProc *pdata, int timeout = 10);	\
	int setDate(Control_PTZProc *pdata, int timeout = 10);	\
	int sendDate(Control_PTZProc *pdata, int timeout = 10);	\
	/*信息管理,存储平台下发消息并回查*/	\
	int getStructId(Control_Message pdata);	\
	int getDate(Control_Message *pdata, int timeout = 10);	\
	int setDate(Control_Message *pdata, int timeout = 10);	\
	int sendDate(Control_Message *pdata, int timeout = 10);	\
	/*g.信息发送*/	\
	int getStructId(Control_sendInfo pdata);	\
	int getDate(Control_sendInfo *pdata, int timeout = 10);	\
	int setDate(Control_sendInfo *pdata, int timeout = 10);	\
	int sendDate(Control_sendInfo *pdata, int timeout = 10);	\
	/*控制OSD信息:调整坐标和字符最大长度会启停编码,只改内容时坐标值和最大长度填-1.*/	\
	int getStructId(Control_OSD_Info pdata);	\
	int getDate(Control_OSD_Info *pdata, int timeout = 10);	\
	int setDate(Control_OSD_Info *pdata, int timeout = 10);	\
	int sendDate(Control_OSD_Info *pdata, int timeout = 10);	\
	/*LCD屏信息显示*/	\
	int getStructId(Control_LCD_InfoShow pdata);	\
	int getDate(Control_LCD_InfoShow *pdata, int timeout = 10);	\
	int setDate(Control_LCD_InfoShow *pdata, int timeout = 10);	\
	int sendDate(Control_LCD_InfoShow *pdata, int timeout = 10);	\
	/*发送页面键值*/	\
	int getStructId(Control_SendPageKeyid pdata);	\
	int getDate(Control_SendPageKeyid *pdata, int timeout = 10);	\
	int setDate(Control_SendPageKeyid *pdata, int timeout = 10);	\
	int sendDate(Control_SendPageKeyid *pdata, int timeout = 10);	\
	/*g.数据下行透传*/	\
	int getStructId(Control_data_transit pdata);	\
	int getDate(Control_data_transit *pdata, int timeout = 10);	\
	int setDate(Control_data_transit *pdata, int timeout = 10);	\
	int sendDate(Control_data_transit *pdata, int timeout = 10);	\
	/*b.设备基本信息*/	\
	int getStructId(Param_BbInfo pdata);	\
	int getDate(Param_BbInfo *pdata, int timeout = 10);	\
	int setDate(Param_BbInfo *pdata, int timeout = 10);	\
	int sendDate(Param_BbInfo *pdata, int timeout = 10);	\
	/*g.系统时间*/	\
	int getStructId(Param_System_Time pdata);	\
	int getDate(Param_System_Time *pdata, int timeout = 10);	\
	int setDate(Param_System_Time *pdata, int timeout = 10);	\
	int sendDate(Param_System_Time *pdata, int timeout = 10);	\
	/*系统参数配置*/	\
	int getStructId(Param_System_Info pdata);	\
	int getDate(Param_System_Info *pdata, int timeout = 10);	\
	int setDate(Param_System_Info *pdata, int timeout = 10);	\
	int sendDate(Param_System_Info *pdata, int timeout = 10);	\
	/*基本设置*/	\
	int getStructId(Param_Base_Info pdata);	\
	int getDate(Param_Base_Info *pdata, int timeout = 10);	\
	int setDate(Param_Base_Info *pdata, int timeout = 10);	\
	int sendDate(Param_Base_Info *pdata, int timeout = 10);	\
	/*b.设备信息*/	\
	int getStructId(Param_Terminal_Info pdata);	\
	int getDate(Param_Terminal_Info *pdata, int timeout = 10);	\
	int setDate(Param_Terminal_Info *pdata, int timeout = 10);	\
	int sendDate(Param_Terminal_Info *pdata, int timeout = 10);	\
	/*开关机设置*/	\
	int getStructId(Param_SysPowerSet pdata);	\
	int getDate(Param_SysPowerSet *pdata, int timeout = 10);	\
	int setDate(Param_SysPowerSet *pdata, int timeout = 10);	\
	int sendDate(Param_SysPowerSet *pdata, int timeout = 10);	\
	/*安全设置*/	\
	int getStructId(Param_SecuritySet pdata);	\
	int getDate(Param_SecuritySet *pdata, int timeout = 10);	\
	int setDate(Param_SecuritySet *pdata, int timeout = 10);	\
	int sendDate(Param_SecuritySet *pdata, int timeout = 10);	\
	/*录像设置*/	\
	int getStructId(Param_RecordSet pdata);	\
	int getDate(Param_RecordSet *pdata, int timeout = 10);	\
	int setDate(Param_RecordSet *pdata, int timeout = 10);	\
	int sendDate(Param_RecordSet *pdata, int timeout = 10);	\
	/*前端osd设置*/	\
	int getStructId(Param_FrontOsdSet pdata);	\
	int getDate(Param_FrontOsdSet *pdata, int timeout = 10);	\
	int setDate(Param_FrontOsdSet *pdata, int timeout = 10);	\
	int sendDate(Param_FrontOsdSet *pdata, int timeout = 10);	\
	/*显示设置*/	\
	int getStructId(Param_DisplaySet pdata);	\
	int getDate(Param_DisplaySet *pdata, int timeout = 10);	\
	int setDate(Param_DisplaySet *pdata, int timeout = 10);	\
	int sendDate(Param_DisplaySet *pdata, int timeout = 10);	\
	/*视频输出位置设置*/	\
	int getStructId(Param_VideoOutputSet pdata);	\
	int getDate(Param_VideoOutputSet *pdata, int timeout = 10);	\
	int setDate(Param_VideoOutputSet *pdata, int timeout = 10);	\
	int sendDate(Param_VideoOutputSet *pdata, int timeout = 10);	\
	/*定时录像时间段设置*/	\
	int getStructId(Param_RecordTimerSet pdata);	\
	int getDate(Param_RecordTimerSet *pdata, int timeout = 10);	\
	int setDate(Param_RecordTimerSet *pdata, int timeout = 10);	\
	int sendDate(Param_RecordTimerSet *pdata, int timeout = 10);	\
	/*录像编码设置*/	\
	int getStructId(Param_RecordCodeSet pdata);	\
	int getDate(Param_RecordCodeSet *pdata, int timeout = 10);	\
	int setDate(Param_RecordCodeSet *pdata, int timeout = 10);	\
	int sendDate(Param_RecordCodeSet *pdata, int timeout = 10);	\
	/*IPC设置*/	\
	int getStructId(Param_IPCSet pdata);	\
	int getDate(Param_IPCSet *pdata, int timeout = 10);	\
	int setDate(Param_IPCSet *pdata, int timeout = 10);	\
	int sendDate(Param_IPCSet *pdata, int timeout = 10);	\
	/*磁盘管理设置*/	\
	int getStructId(Param_DiskUseSet pdata);	\
	int getDate(Param_DiskUseSet *pdata, int timeout = 10);	\
	int setDate(Param_DiskUseSet *pdata, int timeout = 10);	\
	int sendDate(Param_DiskUseSet *pdata, int timeout = 10);	\
	/*网络参数,共有8组ip地址*/	\
	int getStructId(Param_CenterNetWork pdata);	\
	int getDate(Param_CenterNetWork *pdata, int timeout = 10);	\
	int setDate(Param_CenterNetWork *pdata, int timeout = 10);	\
	int sendDate(Param_CenterNetWork *pdata, int timeout = 10);	\
	/*本地网络参数*/	\
	int getStructId(Param_LocalNetWork pdata);	\
	int getDate(Param_LocalNetWork *pdata, int timeout = 10);	\
	int setDate(Param_LocalNetWork *pdata, int timeout = 10);	\
	int sendDate(Param_LocalNetWork *pdata, int timeout = 10);	\
	/*3G拨号参数*/	\
	int getStructId(Param_DialSet pdata);	\
	int getDate(Param_DialSet *pdata, int timeout = 10);	\
	int setDate(Param_DialSet *pdata, int timeout = 10);	\
	int sendDate(Param_DialSet *pdata, int timeout = 10);	\
	/*WIFI参数*/	\
	int getStructId(Param_WIFISet pdata);	\
	int getDate(Param_WIFISet *pdata, int timeout = 10);	\
	int setDate(Param_WIFISet *pdata, int timeout = 10);	\
	int sendDate(Param_WIFISet *pdata, int timeout = 10);	\
	/*速度参数:*/	\
	int getStructId(Param_SpeedSet pdata);	\
	int getDate(Param_SpeedSet *pdata, int timeout = 10);	\
	int setDate(Param_SpeedSet *pdata, int timeout = 10);	\
	int sendDate(Param_SpeedSet *pdata, int timeout = 10);	\
	/*加速度参数:*/	\
	int getStructId(Param_G_SensorSet pdata);	\
	int getDate(Param_G_SensorSet *pdata, int timeout = 10);	\
	int setDate(Param_G_SensorSet *pdata, int timeout = 10);	\
	int sendDate(Param_G_SensorSet *pdata, int timeout = 10);	\
	/*温度参数:*/	\
	int getStructId(Param_TemperateSet pdata);	\
	int getDate(Param_TemperateSet *pdata, int timeout = 10);	\
	int setDate(Param_TemperateSet *pdata, int timeout = 10);	\
	int sendDate(Param_TemperateSet *pdata, int timeout = 10);	\
	/*电压参数:*/	\
	int getStructId(Param_VoltageSet pdata);	\
	int getDate(Param_VoltageSet *pdata, int timeout = 10);	\
	int setDate(Param_VoltageSet *pdata, int timeout = 10);	\
	int sendDate(Param_VoltageSet *pdata, int timeout = 10);	\
	/*移动侦测参数:*/	\
	int getStructId(Param_MotionDetctionSet pdata);	\
	int getDate(Param_MotionDetctionSet *pdata, int timeout = 10);	\
	int setDate(Param_MotionDetctionSet *pdata, int timeout = 10);	\
	int sendDate(Param_MotionDetctionSet *pdata, int timeout = 10);	\
	/*IO报警参数:*/	\
	int getStructId(Param_IoSet pdata);	\
	int getDate(Param_IoSet *pdata, int timeout = 10);	\
	int setDate(Param_IoSet *pdata, int timeout = 10);	\
	int sendDate(Param_IoSet *pdata, int timeout = 10);	\
	/*云台设置参数*/	\
	int getStructId(Param_PTZSet pdata);	\
	int getDate(Param_PTZSet *pdata, int timeout = 10);	\
	int setDate(Param_PTZSet *pdata, int timeout = 10);	\
	int sendDate(Param_PTZSet *pdata, int timeout = 10);	\
	/*串口设置参数*/	\
	int getStructId(Param_SerialPortSet pdata);	\
	int getDate(Param_SerialPortSet *pdata, int timeout = 10);	\
	int setDate(Param_SerialPortSet *pdata, int timeout = 10);	\
	int sendDate(Param_SerialPortSet *pdata, int timeout = 10);	\
	/*用户自定义参数,与系统运行无关参数*/	\
	int getStructId(Param_UserDefinde pdata);	\
	int getDate(Param_UserDefinde *pdata, int timeout = 10);	\
	int setDate(Param_UserDefinde *pdata, int timeout = 10);	\
	int sendDate(Param_UserDefinde *pdata, int timeout = 10);	\
	/*事件格式*/	\
	int getStructId(SYSTEM_EVENT pdata);	\
	int getDate(SYSTEM_EVENT *pdata, int timeout = 10);	\
	int setDate(SYSTEM_EVENT *pdata, int timeout = 10);	\
	int sendDate(SYSTEM_EVENT *pdata, int timeout = 10);	\


//server接口宏定义 MdvrServerInterface.h
#define __MdvrServerInterface_h_define_ 	\
	/*看门狗*/ 	\
	virtual int deal_Sdk_watchDog(Sdk_watchDog * pdata){return -1;} 	\
	/*g.b.读取参数路径*/ 	\
	virtual int deal_Info_getParamPath(Info_getParamPath * pdata){return -1;} 	\
	/*gps信息*/ 	\
	virtual int deal_Info_gps(Info_gps * pdata){return -1;} 	\
	/*b.GPS原始信息*/ 	\
	virtual int deal_Info_gpsOriginalData(Info_gpsOriginalData * pdata){return -1;} 	\
	/*3g信息*/ 	\
	virtual int deal_Info_3g(Info_3g * pdata){return -1;} 	\
	/*wifi信息*/ 	\
	virtual int deal_Info_wifi(Info_wifi * pdata){return -1;} 	\
	/*网络信息*/ 	\
	virtual int deal_Info_network(Info_network * pdata){return -1;} 	\
	/*b.速度信息*/ 	\
	virtual int deal_Info_speed(Info_speed * pdata){return -1;} 	\
	/*视频信息*/ 	\
	virtual int deal_Info_video(Info_video * pdata){return -1;} 	\
	/*传感器信息*/ 	\
	virtual int deal_Info_sensor(Info_sensor * pdata){return -1;} 	\
	/*磁盘信息*/ 	\
	virtual int deal_Info_disk(Info_disk * pdata){return -1;} 	\
	/*串口信息*/ 	\
	virtual int deal_Info_com(Info_com * pdata){return -1;} 	\
	/*日志信息*/ 	\
	virtual int deal_Info_log(Info_log * pdata){return -1;} 	\
	/*IPC信息*/ 	\
	virtual int deal_Info_ipc(Info_ipc * pdata){return -1;} 	\
	/*获取mdvr的当前报警状态,mdvr产生报警时,外部模块可能没有启动好或其它原因导致报警数据没接收到,这种情况下就可以调用这个接口查询*/ 	\
	virtual int deal_Info_alarmState(Info_alarmState * pdata){return -1;} 	\
	/*b.设置链接平台状态*/ 	\
	virtual int deal_Control_setCMSLinkStatus(Control_setCMSLinkStatus * pdata){return -1;} 	\
	/*b.系统操作*/ 	\
	virtual int deal_Control_system(Control_system * pdata){return -1;} 	\
	/*b.重启App*/ 	\
	virtual int deal_Control_rebootApp(Control_rebootApp * pdata){return -1;} 	\
	/*视频预览布局控制*/ 	\
	virtual int deal_Control_VideoPreview(Control_VideoPreview * pdata){return -1;} 	\
	/*录像搜索*/ 	\
	virtual int deal_Control_VideoSearch(Control_VideoSearch * pdata){return -1;} 	\
	/*录像回放*/ 	\
	virtual int deal_Control_VideoPlayback(Control_VideoPlayback * pdata){return -1;} 	\
	/*录像文件操作*/ 	\
	virtual int deal_Control_Record_File(Control_Record_File * pdata){return -1;} 	\
	/*b.生成多媒体文件*/ 	\
	virtual int deal_Control_createMultimediaFile(Control_createMultimediaFile * pdata){return -1;} 	\
	/*b.电话控制*/ 	\
	virtual int deal_Control_opTel(Control_opTel * pdata){return -1;} 	\
	/*管理电话本*/ 	\
	virtual int deal_Control_manageTelbook(Control_manageTelbook * pdata){return -1;} 	\
	/*电话本查询*/ 	\
	virtual int deal_Control_TelBookSearch(Control_TelBookSearch * pdata){return -1;} 	\
	/*发短信*/ 	\
	virtual int deal_Control_sendSMS(Control_sendSMS * pdata){return -1;} 	\
	/*控制云台的操作*/ 	\
	virtual int deal_Control_PTZProc(Control_PTZProc * pdata){return -1;} 	\
	/*信息管理,存储平台下发消息并回查*/ 	\
	virtual int deal_Control_Message(Control_Message * pdata){return -1;} 	\
	/*g.信息发送*/ 	\
	virtual int deal_Control_sendInfo(Control_sendInfo * pdata){return -1;} 	\
	/*控制OSD信息:调整坐标和字符最大长度会启停编码,只改内容时坐标值和最大长度填-1.*/ 	\
	virtual int deal_Control_OSD_Info(Control_OSD_Info * pdata){return -1;} 	\
	/*LCD屏信息显示*/ 	\
	virtual int deal_Control_LCD_InfoShow(Control_LCD_InfoShow * pdata){return -1;} 	\
	/*发送页面键值*/ 	\
	virtual int deal_Control_SendPageKeyid(Control_SendPageKeyid * pdata){return -1;} 	\
	/*g.数据下行透传*/ 	\
	virtual int deal_Control_data_transit(Control_data_transit * pdata){return -1;} 	\
	/*b.设备基本信息*/ 	\
	virtual int deal_Param_BbInfo(Param_BbInfo * pdata){return -1;} 	\
	/*g.系统时间*/ 	\
	virtual int deal_Param_System_Time(Param_System_Time * pdata){return -1;} 	\
	/*系统参数配置*/ 	\
	virtual int deal_Param_System_Info(Param_System_Info * pdata){return -1;} 	\
	/*基本设置*/ 	\
	virtual int deal_Param_Base_Info(Param_Base_Info * pdata){return -1;} 	\
	/*b.设备信息*/ 	\
	virtual int deal_Param_Terminal_Info(Param_Terminal_Info * pdata){return -1;} 	\
	/*开关机设置*/ 	\
	virtual int deal_Param_SysPowerSet(Param_SysPowerSet * pdata){return -1;} 	\
	/*安全设置*/ 	\
	virtual int deal_Param_SecuritySet(Param_SecuritySet * pdata){return -1;} 	\
	/*录像设置*/ 	\
	virtual int deal_Param_RecordSet(Param_RecordSet * pdata){return -1;} 	\
	/*前端osd设置*/ 	\
	virtual int deal_Param_FrontOsdSet(Param_FrontOsdSet * pdata){return -1;} 	\
	/*显示设置*/ 	\
	virtual int deal_Param_DisplaySet(Param_DisplaySet * pdata){return -1;} 	\
	/*视频输出位置设置*/ 	\
	virtual int deal_Param_VideoOutputSet(Param_VideoOutputSet * pdata){return -1;} 	\
	/*定时录像时间段设置*/ 	\
	virtual int deal_Param_RecordTimerSet(Param_RecordTimerSet * pdata){return -1;} 	\
	/*录像编码设置*/ 	\
	virtual int deal_Param_RecordCodeSet(Param_RecordCodeSet * pdata){return -1;} 	\
	/*IPC设置*/ 	\
	virtual int deal_Param_IPCSet(Param_IPCSet * pdata){return -1;} 	\
	/*磁盘管理设置*/ 	\
	virtual int deal_Param_DiskUseSet(Param_DiskUseSet * pdata){return -1;} 	\
	/*网络参数,共有8组ip地址*/ 	\
	virtual int deal_Param_CenterNetWork(Param_CenterNetWork * pdata){return -1;} 	\
	/*本地网络参数*/ 	\
	virtual int deal_Param_LocalNetWork(Param_LocalNetWork * pdata){return -1;} 	\
	/*3G拨号参数*/ 	\
	virtual int deal_Param_DialSet(Param_DialSet * pdata){return -1;} 	\
	/*WIFI参数*/ 	\
	virtual int deal_Param_WIFISet(Param_WIFISet * pdata){return -1;} 	\
	/*速度参数:*/ 	\
	virtual int deal_Param_SpeedSet(Param_SpeedSet * pdata){return -1;} 	\
	/*加速度参数:*/ 	\
	virtual int deal_Param_G_SensorSet(Param_G_SensorSet * pdata){return -1;} 	\
	/*温度参数:*/ 	\
	virtual int deal_Param_TemperateSet(Param_TemperateSet * pdata){return -1;} 	\
	/*电压参数:*/ 	\
	virtual int deal_Param_VoltageSet(Param_VoltageSet * pdata){return -1;} 	\
	/*移动侦测参数:*/ 	\
	virtual int deal_Param_MotionDetctionSet(Param_MotionDetctionSet * pdata){return -1;} 	\
	/*IO报警参数:*/ 	\
	virtual int deal_Param_IoSet(Param_IoSet * pdata){return -1;} 	\
	/*云台设置参数*/ 	\
	virtual int deal_Param_PTZSet(Param_PTZSet * pdata){return -1;} 	\
	/*串口设置参数*/ 	\
	virtual int deal_Param_SerialPortSet(Param_SerialPortSet * pdata){return -1;} 	\
	/*用户自定义参数,与系统运行无关参数*/ 	\
	virtual int deal_Param_UserDefinde(Param_UserDefinde * pdata){return -1;} 	\
	/*事件格式*/ 	\
	virtual int deal_SYSTEM_EVENT(SYSTEM_EVENT * pdata){return -1;} 	\
 

/*
总结构体
*/
typedef struct __tag_SYSTEM_STRUCT_sdk_data {
	Sdk_register		m_Sdk_register;		//注册SDK
	Sdk_unregister		m_Sdk_unregister;		//注销SDK
	Sdk_watchDog		m_Sdk_watchDog;		//看门狗
	Info_getParamPath		m_Info_getParamPath;		//g.b.读取参数路径
	Info_gps		m_Info_gps;		//gps信息
	Info_gpsOriginalData		m_Info_gpsOriginalData;		//b.GPS原始信息
	Info_3g		m_Info_3g;		//3g信息
	Info_wifi		m_Info_wifi;		//wifi信息
	Info_network		m_Info_network;		//网络信息
	Info_speed		m_Info_speed;		//b.速度信息
	Info_video		m_Info_video;		//视频信息
	Info_sensor		m_Info_sensor;		//传感器信息
	Info_disk		m_Info_disk;		//磁盘信息
	Info_com		m_Info_com;		//串口信息
	Info_log		m_Info_log;		//日志信息
	Info_ipc		m_Info_ipc;		//IPC信息
	Info_alarmState		m_Info_alarmState;		//获取mdvr的当前报警状态,mdvr产生报警时,外部模块可能没有启动好或其它原因导致报警数据没接收到,这种情况下就可以调用这个接口查询
	Control_setCMSLinkStatus		m_Control_setCMSLinkStatus;		//b.设置链接平台状态
	Control_system		m_Control_system;		//b.系统操作
	Control_rebootApp		m_Control_rebootApp;		//b.重启App
	Control_VideoPreview		m_Control_VideoPreview;		//视频预览布局控制
	Control_VideoSearch		m_Control_VideoSearch;		//录像搜索
	Control_VideoPlayback		m_Control_VideoPlayback;		//录像回放
	Control_Record_File		m_Control_Record_File;		//录像文件操作
	Control_createMultimediaFile		m_Control_createMultimediaFile;		//b.生成多媒体文件
	Control_opTel		m_Control_opTel;		//b.电话控制
	Control_manageTelbook		m_Control_manageTelbook;		//管理电话本
	Control_TelBookSearch		m_Control_TelBookSearch;		//电话本查询
	Control_sendSMS		m_Control_sendSMS;		//发短信
	Control_PTZProc		m_Control_PTZProc;		//控制云台的操作
	Control_Message		m_Control_Message;		//信息管理,存储平台下发消息并回查
	Control_sendInfo		m_Control_sendInfo;		//g.信息发送
	Control_OSD_Info		m_Control_OSD_Info;		//控制OSD信息:调整坐标和字符最大长度会启停编码,只改内容时坐标值和最大长度填-1.
	Control_LCD_InfoShow		m_Control_LCD_InfoShow;		//LCD屏信息显示
	Control_SendPageKeyid		m_Control_SendPageKeyid;		//发送页面键值
	Control_data_transit		m_Control_data_transit;		//g.数据下行透传
	Param_BbInfo		m_Param_BbInfo;		//b.设备基本信息
	Param_System_Time		m_Param_System_Time;		//g.系统时间
	Param_System_Info		m_Param_System_Info;		//系统参数配置
	Param_Base_Info		m_Param_Base_Info;		//基本设置
	Param_Terminal_Info		m_Param_Terminal_Info;		//b.设备信息
	Param_SysPowerSet		m_Param_SysPowerSet;		//开关机设置
	Param_SecuritySet		m_Param_SecuritySet;		//安全设置
	Param_RecordSet		m_Param_RecordSet;		//录像设置
	Param_FrontOsdSet		m_Param_FrontOsdSet;		//前端osd设置
	Param_DisplaySet		m_Param_DisplaySet;		//显示设置
	Param_VideoOutputSet		m_Param_VideoOutputSet;		//视频输出位置设置
	Param_RecordTimerSet		m_Param_RecordTimerSet;		//定时录像时间段设置
	Param_RecordCodeSet		m_Param_RecordCodeSet;		//录像编码设置
	Param_IPCSet		m_Param_IPCSet;		//IPC设置
	Param_DiskUseSet		m_Param_DiskUseSet;		//磁盘管理设置
	Param_CenterNetWork		m_Param_CenterNetWork;		//网络参数,共有8组ip地址
	Param_LocalNetWork		m_Param_LocalNetWork;		//本地网络参数
	Param_DialSet		m_Param_DialSet;		//3G拨号参数
	Param_WIFISet		m_Param_WIFISet;		//WIFI参数
	Param_SpeedSet		m_Param_SpeedSet;		//速度参数:
	Param_G_SensorSet		m_Param_G_SensorSet;		//加速度参数:
	Param_TemperateSet		m_Param_TemperateSet;		//温度参数:
	Param_VoltageSet		m_Param_VoltageSet;		//电压参数:
	Param_MotionDetctionSet		m_Param_MotionDetctionSet;		//移动侦测参数:
	Param_IoSet		m_Param_IoSet;		//IO报警参数:
	Param_PTZSet		m_Param_PTZSet;		//云台设置参数
	Param_SerialPortSet		m_Param_SerialPortSet;		//串口设置参数
	Param_UserDefinde		m_Param_UserDefinde;		//用户自定义参数,与系统运行无关参数
	SYSTEM_EVENT		m_SYSTEM_EVENT;		//事件格式
}SYSTEM_STRUCT_sdk_data;

#ifdef __cplusplus
}
#endif

#endif //__sdk_data_h__

